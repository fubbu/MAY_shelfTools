global proc shelf_myRigging () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nfilepath = cmds.file(q=True, sn=True)\nfilepath = filepath.split(\"/\")[-1]\nfilepath = filepath.split(\".\")[0]\nfilepath = filepath.split(\"v\")[1]\nfilepath = int(filepath)+1\n\ncmds.file(rename=\"v{}.ma\".format(str(filepath)))\ncmds.file(save=True, type=\"mayaAscii\")" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\nfilepath = cmds.file(q=True, sn=True)\n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "autoSave" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\ndef AUTO_SAVE_PROJECT_DB(*args):\n    filepath = cmds.file(q=True, sn=True)\n    fileName = filepath.split(\"/\")[-1]\n    filepath = filepath.split(\"/\")\n    del filepath[-1]\n    saveFolder = \"/\".join(filepath)\n    fileName = fileName.split(\".\")[0]\n    fileName = fileName.split(\"v\")[-1]\n    fileName = int(fileName)+1\n\n    cmds.file(rename=\"{}/v{}.ma\".format(saveFolder, str(fileName)))\n    cmds.file(save=True, type=\"mayaAscii\")\n\nAUTO_SAVE_PROJECT_DB()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\nparCon = cmds.parentConstraint(listSel[0], listSel[1])\ncm.delete(parCon)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\npa..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "parCon" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\nparCon = cmds.parentConstraint(listSel[0], listSel[1])\ncmds.delete(parCon)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\npoiCon = cmds.pointConstraint(listSel[0], listSel[1])\ncm.delete(poiCon)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\npo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "poiCon" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\npoiCon = cmds.pointConstraint(listSel[0], listSel[1])\ncmds.delete(poiCon)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\noriCon = cmds.orientConstraint(listSel[0], listSel[1])\ncm.delete(oriCon)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\nor..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "oriCon" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nlistSel = cmds.ls(sl=True, fl=True)\noriCon = cmds.orientConstraint(listSel[0], listSel[1])\ncmds.delete(oriCon)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\ndef COLOR_SHAPE_CHANGE_DB(void):\n\tcolor = cmds.intField(colorNumb,v=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistSel = cmds.ls(sl=1,fl=1)\n\n\tfor item in listSel:\n\t\tlistShape = cmds.listRelatives(item, type=\"shape\", f=True)\n\t\tfor shapes in listShape:\n\t\t\tcmds.setAttr(\"{}.overrideEnabled\".format(shapes), True)\n\t\t\tcmds.setAttr(\"{}.overrideColor\".format(shapes), color)\n\n#-------------------------------------WINDOW-------------------------------------\nif cmds.window('Color_Shape',exists=1):\n\tcmds.deleteUI('Color_Shape')\n\nColor_Shape = cmds.window('Color_Shape',t='Color Shape')\nmainWindow = cmds.columnLayout(adj=3)\ncmds.separator(h=10,style='none')\ncmds.text('color number')\ncolorNumb = cmds.intField()\ncmds.separator(h=10,style='none')\ncmds.button(l='CHANGE',c=COLOR_SHAPE_CHANGE_DB,h=40)\n\ncmds.showWindow(Color_Shape)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\ndef COLOR_SHAPE_CHANGE_DB(void):\n\tcolo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "crvColor" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\ndef COLOR_SHAPE_CHANGE_DB(void):\n\tcolor = cmds.intField(colorNumb,v=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistSel = cmds.ls(sl=1,fl=1)\n\n\tfor item in listSel:\n\t\tlistShape = cmds.listRelatives(item, type=\"shape\", f=True)\n\t\tfor shapes in listShape:\n\t\t\tcmds.setAttr(\"{}.overrideEnabled\".format(shapes), True)\n\t\t\tcmds.setAttr(\"{}.overrideColor\".format(shapes), color)\n\n#-------------------------------------WINDOW-------------------------------------\nif cmds.window('Color_Shape',exists=1):\n\tcmds.deleteUI('Color_Shape')\n\nColor_Shape = cmds.window('Color_Shape',t='Color Shape')\nmainWindow = cmds.columnLayout(adj=3)\ncmds.separator(h=10,style='none')\ncmds.text('color number')\ncolorNumb = cmds.intField()\ncmds.separator(h=10,style='none')\ncmds.button(l='CHANGE',c=COLOR_SHAPE_CHANGE_DB,h=40)\n\ncmds.showWindow(Color_Shape)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cm\n\ndef CONNECTION_TRANSLATE_DB(void):\n\taxis = cm.textField(translateCon,tx=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistAxis = list(axis)\n\tlistSelection = cm.ls( sl=1,fl=1 )\n\tconnectedFrom = listSelection[0]\n\tlistSelection.remove(connectedFrom)\n\n\tfor i in range(len(listSelection)):\n\t\tif \"x\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.tx\".format(connectedFrom),\"{}.tx\".format(listSelection[i]) )\n\t\tif \"y\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.ty\".format(connectedFrom),\"{}.ty\".format(listSelection[i]) )\n\t\tif \"z\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.tz\".format(connectedFrom),\"{}.tz\".format(listSelection[i]) )\n\n\ndef CONNECTION_ROTATE_DB(void):\n\taxis = cm.textField(rotateCon,tx=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistAxis = list(axis)\n\tlistSelection = cm.ls( sl=1,fl=1 )\n\tconnectedFrom = listSelection[0]\n\tlistSelection.remove(connectedFrom)\n\n\tfor i in range(len(listSelection)):\n\t\tif \"x\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.rx\".format(connectedFrom),\"{}.rx\".format(listSelection[i]) )\n\t\tif \"y\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.ry\".format(connectedFrom),\"{}.ry\".format(listSelection[i]) )\n\t\tif \"z\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.rz\".format(connectedFrom),\"{}.rz\".format(listSelection[i]) )\n\n\ndef CONNECTION_SCALE_DB(void):\n\taxis = cm.textField(scaleCon,tx=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistAxis = list(axis)\n\tlistSelection = cm.ls( sl=1,fl=1 )\n\tconnectedFrom = listSelection[0]\n\tlistSelection.remove(connectedFrom)\n\n\tfor i in range(len(listSelection)):\n\t\tif \"x\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.sx\".format(connectedFrom),\"{}.sx\".format(listSelection[i]) )\n\t\tif \"y\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.sy\".format(connectedFrom),\"{}.sy\".format(listSelection[i]) )\n\t\tif \"z\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.sz\".format(connectedFrom),\"{}.sz\".format(listSelection[i]) )\n\n\n\n\n\n#-------------------------------------WINDOW-------------------------------------\nif cm.window('Connection_Window',exists=1):\n\tcm.deleteUI('Connection_Window')\n\nConnection_Window = cm.window('Connection_Window',t='Connection Window')\nmainWindow = cm.columnLayout(adj=3)\ncm.separator(h=10,style='none')\ncm.text('Connection axis')\ntranslateCon = cm.textField(it = \"xyz\")\ncm.separator(h=10,style='none')\ncm.button(l='TRANSLATE',c=CONNECTION_TRANSLATE_DB,h=40)\ncm.separator(h=20,style='none')\ncm.text('Connection axis')\nrotateCon = cm.textField(it = \"xyz\")\ncm.separator(h=10,style='none')\ncm.button(l='ROTATE',c=CONNECTION_ROTATE_DB,h=40)\ncm.separator(h=20,style='none')\ncm.text('Connection axis')\nscaleCon = cm.textField(it = \"xyz\")\ncm.separator(h=10,style='none')\ncm.button(l='SCALE',c=CONNECTION_SCALE_DB,h=40)\n\n\n\ncm.showWindow(Connection_Window)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cm\n\ndef CONNECTION_TRANSLATE_DB(void):\n\taxis..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "connection" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cm\n\ndef CONNECTION_TRANSLATE_DB(void):\n\taxis = cm.textField(translateCon,tx=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistAxis = list(axis)\n\tlistSelection = cm.ls( sl=1,fl=1 )\n\tconnectedFrom = listSelection[0]\n\tlistSelection.remove(connectedFrom)\n\n\tfor i in range(len(listSelection)):\n\t\tif \"x\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.tx\".format(connectedFrom),\"{}.tx\".format(listSelection[i]) )\n\t\tif \"y\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.ty\".format(connectedFrom),\"{}.ty\".format(listSelection[i]) )\n\t\tif \"z\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.tz\".format(connectedFrom),\"{}.tz\".format(listSelection[i]) )\n\n\ndef CONNECTION_ROTATE_DB(void):\n\taxis = cm.textField(rotateCon,tx=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistAxis = list(axis)\n\tlistSelection = cm.ls( sl=1,fl=1 )\n\tconnectedFrom = listSelection[0]\n\tlistSelection.remove(connectedFrom)\n\n\tfor i in range(len(listSelection)):\n\t\tif \"x\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.rx\".format(connectedFrom),\"{}.rx\".format(listSelection[i]) )\n\t\tif \"y\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.ry\".format(connectedFrom),\"{}.ry\".format(listSelection[i]) )\n\t\tif \"z\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.rz\".format(connectedFrom),\"{}.rz\".format(listSelection[i]) )\n\n\ndef CONNECTION_SCALE_DB(void):\n\taxis = cm.textField(scaleCon,tx=1,q=1)\n\t#---------------------------------------------------------\n\n\tlistAxis = list(axis)\n\tlistSelection = cm.ls( sl=1,fl=1 )\n\tconnectedFrom = listSelection[0]\n\tlistSelection.remove(connectedFrom)\n\n\tfor i in range(len(listSelection)):\n\t\tif \"x\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.sx\".format(connectedFrom),\"{}.sx\".format(listSelection[i]) )\n\t\tif \"y\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.sy\".format(connectedFrom),\"{}.sy\".format(listSelection[i]) )\n\t\tif \"z\" in listAxis:\n\t\t\tcm.connectAttr( \"{}.sz\".format(connectedFrom),\"{}.sz\".format(listSelection[i]) )\n\n\n\n\n\n#-------------------------------------WINDOW-------------------------------------\nif cm.window('Connection_Window',exists=1):\n\tcm.deleteUI('Connection_Window')\n\nConnection_Window = cm.window('Connection_Window',t='Connection Window')\nmainWindow = cm.columnLayout(adj=3)\ncm.separator(h=10,style='none')\ncm.text('Connection axis')\ntranslateCon = cm.textField(it = \"xyz\")\ncm.separator(h=10,style='none')\ncm.button(l='TRANSLATE',c=CONNECTION_TRANSLATE_DB,h=40)\ncm.separator(h=20,style='none')\ncm.text('Connection axis')\nrotateCon = cm.textField(it = \"xyz\")\ncm.separator(h=10,style='none')\ncm.button(l='ROTATE',c=CONNECTION_ROTATE_DB,h=40)\ncm.separator(h=20,style='none')\ncm.text('Connection axis')\nscaleCon = cm.textField(it = \"xyz\")\ncm.separator(h=10,style='none')\ncm.button(l='SCALE',c=CONNECTION_SCALE_DB,h=40)\n\n\n\ncm.showWindow(Connection_Window)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\nimport maya.mel as mel\n\nselPin = cmds.ls(sl=1,fl=1)\ncmds.spaceLocator(n=\"locPin_control_DB_0\")\npinLocSel = cmds.ls(sl=1,fl=1)\nif not cmds.objExists(\"pinLocWorld\"):\n\tcmds.sets(n=\"pinLocWorld\")\nelse:\n\tcmds.sets(pinLocSel[0], add=\"pinLocWorld\")\n\nparCon = cmds.parentConstraint(selPin[0], pinLocSel[0])\ncmds.delete(parCon)\n\ncmds.parentConstraint(pinLocSel[0], selPin[0])" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\nimport maya.mel as mel\n\nselPin = cmds.l..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "pinLoc" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport maya.mel as mel\n\nselPin = cmds.ls(sl=1,fl=1)\ncmds.spaceLocator(n=\"locPin_control_DB_0\")\npinLocSel = cmds.ls(sl=1,fl=1)\nif not cmds.objExists(\"pinLocWorld\"):\n\tcmds.sets(n=\"pinLocWorld\")\nelse:\n\tcmds.sets(pinLocSel[0], add=\"pinLocWorld\")\n\nparCon = cmds.parentConstraint(selPin[0], pinLocSel[0])\ncmds.delete(parCon)\n\ncmds.pointConstraint(pinLocSel[0], selPin[0])" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Smooth bind skin options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "skinClusterDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "smoothSkin.png" 
        -image1 "smoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SmoothBindSkinOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paint skin weights tool options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "skinWeightPaintDialogItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "paintSkinWeights.png" 
        -image1 "paintSkinWeights.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintSkinWeightsToolOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Click to place joint, click on existing joint to add to skeleton, click/drag to position joint" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Create Joints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "kinJoint.png" 
        -image1 "kinJoint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "JointTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Add influence options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "addInfluenceDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "addWrapInfluence.png" 
        -image1 "addWrapInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "AddInfluenceOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set driven key options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "setDrivenKeyframe.png" 
        -image1 "setDrivenKeyframe.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SetDrivenKeyOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nallNodes = cmds.ls(sl=True, fl=True)\nfor node in allNodes:\n    cmds.lockNode(node, l=False)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\nallNodes = cmds.ls(sl=True, fl=True)\nf..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "unlockNode" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nallNodes = cmds.ls(sl=True, fl=True)\nfor node in allNodes:\n    cmds.lockNode(node, l=False)" 
        -sourceType "python" 
        -doubleClickCommand "import maya.cmds as cmds\n\nallNodes = cmds.ls(sl=True, fl=True)\nfor node in allNodes:\n    cmds.lockNode(node, l=True)" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete construction history on the selected object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "History" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Hist" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeleteHistory" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Freeze transformation options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "identityApplyItemOption" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Fto" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformationsOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Center Pivot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CenterPivot" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Convert polygon edges to nurbs curves options." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "polyToCurveItem2" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Cpetnco" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateCurveFromPolyOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Customize the joint scale" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Joint Size..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "JdsWin" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Toggle the visibility of the origin axis" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Origin Axis" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "OA" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ToggleOriginAxis" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Toggle the display of the frame rate" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Frame Rate" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FR" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ToggleFrameRate" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Toggle the display of the component count for visible polygons" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Poly Count" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PC" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "TogglePolyCount" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cm\n\naxisL = (\"X\",\"Y\",\"Z\")\naxisS = (\"x\",\"y\",\"z\")\n\nlistSel = cm.ls(sl=1,fl=1)\nlistSel = cm.listRelatives(listSel[0])\n\ncm.shadingNode('follicle',au=1)\ncm.pickWalk(d='up')\ncm.rename(\"aaaa\")\ncm.rename(\"aaaa\",\"follicle_aaaa_1\")\n\nfollicleSel = cm.ls(sl=1,fl=1)\nfollicleSelShape = cm.listRelatives(follicleSel[0])\n\ncm.connectAttr(\"{}.local\".format(listSel[0]),\"{}.inputSurface\".format(follicleSelShape[0]))\ncm.connectAttr(\"{}.worldMatrix[0]\".format(listSel[0]),\"{}.inputWorldMatrix\".format(follicleSelShape[0]))\n\nfor i in range(3):\n\tcm.connectAttr(\"{}.outTranslate{}\".format(follicleSelShape[0],axisL[i]),\"{}.t{}\".format(follicleSel[0],axisS[i]))\n\tcm.connectAttr(\"{}.outRotate{}\".format(follicleSelShape[0],axisL[i]),\"{}.r{}\".format(follicleSel[0],axisS[i]))" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cm\n\naxisL = (\"X\",\"Y\",\"Z\")\naxisS = (\"x\",\"y\",\"..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "follicle" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cm\n\naxisL = (\"X\",\"Y\",\"Z\")\naxisS = (\"x\",\"y\",\"z\")\n\nlistSel = cm.ls(sl=1,fl=1)\nlistSel = cm.listRelatives(listSel[0])\n\ncm.shadingNode('follicle',au=1)\ncm.pickWalk(d='up')\ncm.rename(\"aaaa\")\ncm.rename(\"aaaa\",\"follicle_aaaa_1\")\n\nfollicleSel = cm.ls(sl=1,fl=1)\nfollicleSelShape = cm.listRelatives(follicleSel[0])\n\ncm.connectAttr(\"{}.local\".format(listSel[0]),\"{}.inputSurface\".format(follicleSelShape[0]))\ncm.connectAttr(\"{}.worldMatrix[0]\".format(listSel[0]),\"{}.inputWorldMatrix\".format(follicleSelShape[0]))\n\nfor i in range(3):\n\tcm.connectAttr(\"{}.outTranslate{}\".format(follicleSelShape[0],axisL[i]),\"{}.t{}\".format(follicleSel[0],axisS[i]))\n\tcm.connectAttr(\"{}.outRotate{}\".format(follicleSelShape[0],axisL[i]),\"{}.r{}\".format(follicleSel[0],axisS[i]))" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from __future__ import print_function\nfrom string import join\nimport maya.cmds as cm\nimport os\nimport maya.mel as mel\n\n\ndef EXPORT_OBJ_FIX_DB(*args):\n\tnameFolder = cm.textField(groupName, tx=True, q=True)\n\tUSERPROFILE = os.path.expandvars( '$USERPROFILE' )\n\tUSERPROFILE = USERPROFILE.replace('\\\\','/')\n\tUSERPROFILE = \"{}/Desktop/{}\".format(USERPROFILE,nameFolder)\n\n\texportGroupFolder_DB = []\n\texportGroupFolderHierarchy_DB = []\n\n\tcm.select(hi=True)\n\tlistSel = cm.ls(sl=True, fl=True, type='transform')\n\n\tfor item in listSel:\n\t\tlistRel = cm.listRelatives(item, type='shape')\n\t\tif not listRel == None:\n\t\t\texportGroupFolder_DB.append(item)\n\n\tcm.select(exportGroupFolder_DB)\n\n\tlistSel = cm.ls(sl=True, fl=True, l=True, type='transform')\n\n\tfor item in listSel:\n\t\tdirSplit = item.split('|')\n\t\tdirReplace = []\n\t\tfor i in range(len(dirSplit)-1):\n\t\t\tdirReplace.append(dirSplit[i])\n\t\t\tdirCheck = '/'.join(dirReplace)\n\t\t\tif not os.path.isdir('{}{}'.format(USERPROFILE,dirCheck)):\n\t\t\t\tos.makedirs('{}{}'.format(USERPROFILE,dirCheck))\n\n\t\tdirReplace = '/'.join(dirReplace)\n\t\tcm.select(item)\n\t\tmel.eval('file -force -options \"groups=0;ptgroups=0;materials=0;smoothing=0;normals=0\" -typ \"OBJexport\" -pr -es \"{}{}/{}.obj\";'.format(USERPROFILE,dirReplace,dirSplit[-1]))\n\t\tprint (\"{}{}/{}.obj\".format(USERPROFILE,dirReplace,dirSplit[-1]),file = open('{}/importSort'.format(USERPROFILE),'a'))\n\ndef IMPORT_OBJ_FIX_DB(*args):\n\tnameFolder = cm.textField(groupName, tx=True, q=True)\n\tUSERPROFILE = os.path.expandvars( '$USERPROFILE' )\n\tUSERPROFILE = USERPROFILE.replace('\\\\','/')\n\tUSERPROFILE = \"{}/Desktop/{}\".format(USERPROFILE,nameFolder)\n\n\tfor line in open('{}/importSort'.format(USERPROFILE),'r'):\n\t\tline = line.rstrip()\n\t\tname = line.split('/')\n\t\tname = name[-1][:-4]\n\t\tif not line:\n\t\t\tcontinue\n\t\tfolder = line.replace(USERPROFILE,\"\")\n\t\tfolder = folder.split('/')\n\t\tfolder = folder[1:]\n\t\tif not \"obj\" in folder[0]:\n\t\t\tfor i in range(len(folder)):\n\t\t\t\tif not \"obj\" in folder[i]:\n\t\t\t\t\tif not cm.objExists(folder[i]):\n\t\t\t\t\t\tcm.group(n=folder[i],em=True)\n\t\t\t\t\t\tif folder[i] != folder[0]:\n\t\t\t\t\t\t\tcm.parent(folder[i],folder[i-1])\n\t\t\tmel.eval('file -import -type \"OBJ\"  -ignoreVersion -ra true -mergeNamespacesOnClash true -namespace \"importFile\" -options \"mo=1\"  -pr  -importTimeRange \"combine\" \"{}\";'.format(line))\n\t\t\tcm.select(\"importFile:Mesh\")\n\t\t\tRENAME_IMPORT_DB(name)\n\t\t\t\n\t\t\tcm.parent(name,folder[-2])\n\ndef RENAME_IMPORT_DB(i_name):\n\tcm.rename(\"aaaa\")\n\tcm.rename(\"aaaa\", i_name)\n\n#-------------------------------------WINDOW-------------------------------------\nif cm.window('importOBJ_window',exists=1):\n\tcm.deleteUI('importOBJ_window')\n\nwindow = cm.window('importOBJ_window',t='import obj')\ncm.columnLayout()\ngroupName = cm.textField(w=300,h=25)\ncm.separator(h=10,style='none')\ncm.button(l='EXPORT',c=EXPORT_OBJ_FIX_DB,h=40,w=300)\ncm.separator(h=10,style='none')\ncm.button(l='IMPORT',c=IMPORT_OBJ_FIX_DB,h=40,w=300)\ncm.showWindow( window )" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "from __future__ import print_function\nfrom string import join\nim..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "objExport" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from __future__ import print_function\nfrom string import join\nimport maya.cmds as cm\nimport os\nimport maya.mel as mel\n\n\ndef EXPORT_OBJ_FIX_DB(*args):\n\tnameFolder = cm.textField(groupName, tx=True, q=True)\n\tUSERPROFILE = os.path.expandvars( '$USERPROFILE' )\n\tUSERPROFILE = USERPROFILE.replace('\\\\','/')\n\tUSERPROFILE = \"{}/Desktop/{}\".format(USERPROFILE,nameFolder)\n\n\texportGroupFolder_DB = []\n\texportGroupFolderHierarchy_DB = []\n\n\tcm.select(hi=True)\n\tlistSel = cm.ls(sl=True, fl=True, type='transform')\n\n\tfor item in listSel:\n\t\tlistRel = cm.listRelatives(item, type='shape')\n\t\tif not listRel == None:\n\t\t\texportGroupFolder_DB.append(item)\n\n\tcm.select(exportGroupFolder_DB)\n\n\tlistSel = cm.ls(sl=True, fl=True, l=True, type='transform')\n\n\tfor item in listSel:\n\t\tdirSplit = item.split('|')\n\t\tdirReplace = []\n\t\tfor i in range(len(dirSplit)-1):\n\t\t\tdirReplace.append(dirSplit[i])\n\t\t\tdirCheck = '/'.join(dirReplace)\n\t\t\tif not os.path.isdir('{}{}'.format(USERPROFILE,dirCheck)):\n\t\t\t\tos.makedirs('{}{}'.format(USERPROFILE,dirCheck))\n\n\t\tdirReplace = '/'.join(dirReplace)\n\t\tcm.select(item)\n\t\tmel.eval('file -force -options \"groups=0;ptgroups=0;materials=0;smoothing=0;normals=0\" -typ \"OBJexport\" -pr -es \"{}{}/{}.obj\";'.format(USERPROFILE,dirReplace,dirSplit[-1]))\n\t\tprint (\"{}{}/{}.obj\".format(USERPROFILE,dirReplace,dirSplit[-1]),file = open('{}/importSort'.format(USERPROFILE),'a'))\n\ndef IMPORT_OBJ_FIX_DB(*args):\n\tnameFolder = cm.textField(groupName, tx=True, q=True)\n\tUSERPROFILE = os.path.expandvars( '$USERPROFILE' )\n\tUSERPROFILE = USERPROFILE.replace('\\\\','/')\n\tUSERPROFILE = \"{}/Desktop/{}\".format(USERPROFILE,nameFolder)\n\n\tfor line in open('{}/importSort'.format(USERPROFILE),'r'):\n\t\tline = line.rstrip()\n\t\tname = line.split('/')\n\t\tname = name[-1][:-4]\n\t\tif not line:\n\t\t\tcontinue\n\t\tfolder = line.replace(USERPROFILE,\"\")\n\t\tfolder = folder.split('/')\n\t\tfolder = folder[1:]\n\t\tif not \"obj\" in folder[0]:\n\t\t\tfor i in range(len(folder)):\n\t\t\t\tif not \"obj\" in folder[i]:\n\t\t\t\t\tif not cm.objExists(folder[i]):\n\t\t\t\t\t\tcm.group(n=folder[i],em=True)\n\t\t\t\t\t\tif folder[i] != folder[0]:\n\t\t\t\t\t\t\tcm.parent(folder[i],folder[i-1])\n\t\t\tmel.eval('file -import -type \"OBJ\"  -ignoreVersion -ra true -mergeNamespacesOnClash true -namespace \"importFile\" -options \"mo=1\"  -pr  -importTimeRange \"combine\" \"{}\";'.format(line))\n\t\t\tcm.select(\"importFile:Mesh\")\n\t\t\tRENAME_IMPORT_DB(name)\n\t\t\t\n\t\t\tcm.parent(name,folder[-2])\n\ndef RENAME_IMPORT_DB(i_name):\n\tcm.rename(\"aaaa\")\n\tcm.rename(\"aaaa\", i_name)\n\n#-------------------------------------WINDOW-------------------------------------\nif cm.window('importOBJ_window',exists=1):\n\tcm.deleteUI('importOBJ_window')\n\nwindow = cm.window('importOBJ_window',t='import obj')\ncm.columnLayout()\ngroupName = cm.textField(w=300,h=25)\ncm.separator(h=10,style='none')\ncm.button(l='EXPORT',c=EXPORT_OBJ_FIX_DB,h=40,w=300)\ncm.separator(h=10,style='none')\ncm.button(l='IMPORT',c=IMPORT_OBJ_FIX_DB,h=40,w=300)\ncm.showWindow( window )" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# -----------------------------------------------------------------------------------\n# AUTHOR:     Tom Ferstl\n#             t.ferstl@gmx.net\n#\n# INSTALL:    copy script to your maya scripts directory (i.e. C:\\Users\\xx\\Documents\\maya\\2011\\scripts )\n#\n# USAGE:      select a skinned mesh and execute the following python commands (without # and whitespace):\n#             import tf_smoothSkinWeight\n#             tf_smoothSkinWeight.paint()\n# -----------------------------------------------------------------------------------\n\nimport maya.cmds as mc\nimport maya.mel as mm\nimport maya.cmds as mc\nimport maya.OpenMaya as om\nimport maya.OpenMayaAnim as oma\n\n# -----------------------------------------------------------------------------------\n# define mel procedures for the scripted brush\n# -----------------------------------------------------------------------------------\ndef initPaint():\n  cmd = '''\n    global string $tf_skinSmoothPatin_selection[];\n\n    global proc tf_smoothBrush( string $context )\n    {\n      artUserPaintCtx -e -ic \"tf_init_smoothBrush\" -svc \"tf_set_smoothBrushValue\"\n      -fc \"\" -gvc \"\" -gsc \"\" -gac \"\" -tcc \"\" $context;\n    }\n\n    global proc tf_init_smoothBrush( string $name )\n    {\n        global string $tf_skinSmoothPatin_selection[];\n        \n        $tf_skinSmoothPatin_selection = {};\n        string $sel[] = `ls -sl -fl`;\n        string $obj[] = `ls -sl -o`;\n        $objName = $obj[0];\n        \n        int $i = 0;\n        for($vtx in $sel)\n        {\n            string $buffer[];\n            int $number = `tokenize $vtx \".[]\" $buffer`;\n            $tf_skinSmoothPatin_selection[$i] = $buffer[2];\n            $i++;\n            if ($number != 0)\n                $objName = $buffer[0];\n        }\n        \n        python(\"paint = tf_smoothSkinWeight.smoothPaintClass()\"); \n    }\n\n    global proc tf_set_smoothBrushValue( int $slot, int $index, float $val )        \n    {\n        global string $tf_skinSmoothPatin_selection[];\n\n            if($tf_skinSmoothPatin_selection[0] != \"\")\n            {\n                if( stringArrayContains($index, $tf_skinSmoothPatin_selection) )\n                    python(\"paint.setWeight(\"+$index+\",\"+$val+\")\"); \n            }\n            else\n                python(\"paint.setWeight(\"+$index+\",\"+$val+\")\");        \n    }\n  '''\n  mm.eval(cmd)\n\n# -----------------------------------------------------------------------------------\n# execute the scripted brush tool and setup the tf_smoothBrush command\n# -----------------------------------------------------------------------------------\ndef paint():\n  cmd = '''\n    ScriptPaintTool;\n    artUserPaintCtx -e -tsc \"tf_smoothBrush\" `currentCtx`;\n  '''\n  mm.eval(cmd)\n\n# -----------------------------------------------------------------------------------\n# execute the mel procedures for the scripted brush\n# -----------------------------------------------------------------------------------\ninitPaint()\n\n# -----------------------------------------------------------------------------------\n# class for holding initializing skincluster relevant stuff\n# -----------------------------------------------------------------------------------\nclass smoothPaintClass():\n  \n  def __init__(self):\n    self.skinCluster = ''\n    self.obj = ''\n    self.mitVex = ''\n    \n    # select the skinned geo\n    selection = om.MSelectionList()\n    om.MGlobal.getActiveSelectionList( selection )\n\n    # get dag path for selection\n    dagPath = om.MDagPath()\n    components = om.MObject()\n    array = om.MIntArray()\n    selection.getDagPath( 0, dagPath, components )\n    self.obj = dagPath\n    dagPath.extendToShape()\n    \n    # currentNode is MObject to your mesh\n    currentNode = dagPath.node()\n    self.mitVtx = om.MItMeshVertex (dagPath)\n    \n    # get skincluster from shape\n    try:\n      itDG = om.MItDependencyGraph(currentNode, om.MFn.kSkinClusterFilter, om.MItDependencyGraph.kUpstream)\n      while not itDG.isDone():\n        oCurrentItem = itDG.currentItem()\n        fnSkin = oma.MFnSkinCluster(oCurrentItem)\n        self.skinCluster = fnSkin\n        break\n    except:\n      om.MGlobal.displayError(\"No SkinCluster to paint on\")\n    \n  # -----------------------------------------------------------------------------------\n  # function to read, average, and set all influence weights on the vertex\n  # vtx     (int)     current vertex index\n  # value   (float)   weight value from the artisan brush\n  # -----------------------------------------------------------------------------------\n  def setWeight(self, vtx, value):    \n    dagPath = self.obj\n    fnSkin = self.skinCluster\n    mitVtx = self.mitVtx\n    \n    if not fnSkin:      # error out when there is no skinCluster defined\n      om.MGlobal.displayError(\"No SkinCluster to paint on\")\n    else:\n      component = om.MFnSingleIndexedComponent().create(om.MFn.kMeshVertComponent)\n      om.MFnSingleIndexedComponent(component).addElement( vtx )\n      \n      oldWeights = om.MDoubleArray()\n      surrWeights = om.MDoubleArray()\n      infCount = om.MScriptUtil()\n      int = infCount.asUintPtr()\n      surrVtxArray = om.MIntArray()\n      newWeights = om.MDoubleArray()\n      infIndices = om.MIntArray()\n      prevVtxUtil = om.MScriptUtil( )\n      prevVtx = prevVtxUtil.asIntPtr()\n      \n      # create mesh iterator and get conneted vertices for averaging\n      mitVtx = om.MItMeshVertex (dagPath, component)\n      mitVtx.getConnectedVertices(surrVtxArray)\n      surrVtxCount = len(surrVtxArray)\n            \n      surrComponents = om.MFnSingleIndexedComponent().create(om.MFn.kMeshVertComponent)\n      om.MFnSingleIndexedComponent(surrComponents).addElements( surrVtxArray )\n      \n      # read weight from single vertex (oldWeights) and from the surrounding vertices (surrWeights)\n      fnSkin.getWeights(dagPath, component, oldWeights, int)\n      fnSkin.getWeights(dagPath, surrComponents, surrWeights, int)\n      influenceCount = om.MScriptUtil.getUint(int)\n      \n      # average all the surrounding vertex weights and multiply and blend it over the origWeight with the weight from the artisan brush\n      for i in range(influenceCount):\n        infIndices.append( i )\n        newWeights.append( 0.0 )\n        for j in range(i,len(surrWeights),influenceCount):\n          newWeights[i] += (((surrWeights[j] / surrVtxCount) * value) + ((oldWeights[i] / surrVtxCount) * (1-value)))\n      \n      # set the final weights throught the skinCluster again\n      fnSkin.setWeights( dagPath, component, infIndices, newWeights, 1, oldWeights)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# --------------------------------------------------------------..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "smoothSkin" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import tf_smoothSkinWeight\ntf_smoothSkinWeight.paint()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import tween_machine\ntween_machine.start()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import tween_machine\ntween_machine.start()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "tweenMachine" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import tween_machine\ntween_machine.start()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nlistSelection = cmds.ls(sl=1,fl=1)\nobjectSelection = listSelection[-1]\nlistSelection.remove(objectSelection)\nfor each in listSelection:\n    posVtx = cmds.xform(each,q=1,ws=1,t=1)\n    vtxNumber = each.split('vtx')[1]\n    cmds.move(posVtx[0],posVtx[1],posVtx[2],'%s.vtx%s' % (objectSelection,vtxNumber),a=1)\n\n    \n    cmds.xform('%s.vtx%s' % (objectSelection,vtxNumber),ws=1,t=(posVtx[0],posVtx[1],posVtx[2]))" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\nlistSelection = cmds.ls(sl=1,fl=1)\nobj..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "vtxCopy" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nlistSelection = cmds.ls(sl=1,fl=1)\nobjectSelection = listSelection[-1]\nlistSelection.remove(objectSelection)\nfor each in listSelection:\n    posVtx = cmds.xform(each,q=1,ws=1,t=1)\n    vtxNumber = each.split('vtx')[1]\n    cmds.move(posVtx[0],posVtx[1],posVtx[2],'%s.vtx%s' % (objectSelection,vtxNumber),a=1)\n\n    \n    cmds.xform('%s.vtx%s' % (objectSelection,vtxNumber),ws=1,t=(posVtx[0],posVtx[1],posVtx[2]))" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "listBones = cmds.ls(type=\"joint\")\nfor item in listBones:\n    cmds.setAttr(\"{}.drawStyle\".format(item), 2)\n    \nlistLocators = cmds.ls(type=\"locator\")\nfor item in listLocators:\n    cmds.setAttr(\"{}.visibility\".format(item), 0)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "listBones = cmds.ls(type=\"joint\")\nfor item in listBones:\n    cmd..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "hideJL" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "listBones = cmds.ls(type=\"joint\")\nfor item in listBones:\n    cmds.setAttr(\"{}.drawStyle\".format(item), 2)\n    \nlistLocators = cmds.ls(type=\"locator\")\nfor item in listLocators:\n    cmds.setAttr(\"{}.visibility\".format(item), 0)" 
        -sourceType "python" 
        -doubleClickCommand "listBones = cmds.ls(type=\"joint\")\nfor item in listBones:\n    cmds.setAttr(\"{}.drawStyle\".format(item), 0)\n    \nlistLocators = cmds.ls(type=\"locator\")\nfor item in listLocators:\n    cmds.setAttr(\"{}.visibility\".format(item), 1)" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "listSel = cmds.ls(sl=True, fl=True)\n\ncmds.select(cl=True)\n\nfor item in listSel:\n\tlistShape = cmds.listRelatives(item, type=\"shape\", f=True)\n\tfor shapes in listShape:\n\t\tcmds.select(\"{}.cv[0:1000]\".format(shapes), add=True)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "listSel = cmds.ls(sl=True, fl=True)\n\ncmds.select(cl=True)\n\nfor i..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "selCrv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "listSel = cmds.ls(sl=True, fl=True)\n\ncmds.select(cl=True)\n\nfor item in listSel:\n\tlistShape = cmds.listRelatives(item, type=\"shape\", f=True)\n\tfor shapes in listShape:\n\t\tcmds.select(\"{}.cv[0:1000]\".format(shapes), add=True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Studio Library" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "stdLib" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:\\Users\\paco\\Documents\\maya\\studiolibrary-2.7.1\\src\\studiolibrary\\resource\\icons\\icon.png" 
        -image1 "C:\\Users\\paco\\Documents\\maya\\studiolibrary-2.7.1\\src\\studiolibrary\\resource\\icons\\icon.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\n# -----------------------------------\n# Studio Library\n# www.studiolibrary.com\n# -----------------------------------\n\nimport os\nimport sys\n    \nif not os.path.exists(r'C:\\Users\\paco\\Documents\\maya\\studiolibrary-2.7.1\\src'):\n    raise IOError(r'The source path \"C:\\Users\\paco\\Documents\\maya\\studiolibrary-2.7.1\\src\" does not exist!')\n    \nif r'C:\\Users\\paco\\Documents\\maya\\studiolibrary-2.7.1\\src' not in sys.path:\n    sys.path.insert(0, r'C:\\Users\\paco\\Documents\\maya\\studiolibrary-2.7.1\\src')\n    \nimport studiolibrary\nstudiolibrary.main()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "abxPicke" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def MIRROR_SELECTION_CONTROLS_DB(*args):\n    listSelMirror = cmd..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "picker" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.mel as mel\n\n\ndef MIRROR_SELECTION_CONTROLS_DB(*args):\n    listSelMirror = cmds.ls(sl=True,fl=True)\n    mirrorList = []\n    for item in listSelMirror:\n        mirrorList.append(item)\n        if \"_L_\" in item:\n            mirrorList.append(item.replace('_L_', '_R_'))\n        if \"_R_\" in item:\n            mirrorList.append(item.replace('_R_', '_L_'))\n\n\n    cmds.select(mirrorList)\n\n\n\ndef FLIP_SELECTION_CONTROLS_DB(*args):\n    listSelMirror = cmds.ls(sl=True,fl=True)\n    mirrorList = []\n    for item in listSelMirror:\n        if \"_L_\" in item:\n            mirrorList.append(item.replace('_L_', '_R_'))\n        if \"_R_\" in item:\n            mirrorList.append(item.replace('_R_', '_L_'))\n        if not \"_R_\" in item:\n            if not \"_L_\" in item:\n                mirrorList.append(item)\n\n\n    cmds.select(mirrorList)\n\n\n'''\ncmds.select(\"*_ctrl\")\nlistLside_DB = cmds.ls(sl=True, fl=True)\nlistFin_DB = []\n\n\nfor item in listLside_DB:\n    if \"_R_\" in item:\n        pass\n    else:\n        listFin_DB.append(item)\nprint listFin_DB\n'''\n\n\ndef FLIP_SELECTION_POSE_DB(*args):\n    axisS = (\"x\",\"y\",\"z\")\n\n\n    listSelMirror = cmds.ls(sl=True, fl=True)\n    for item in listSelMirror:\n        if \"_L_\" in item:\n            mirrorCtrl = item.replace('_L_', '_R_')\n            for i in range(3):\n                lockT = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]), se=True)\n\n\n                if lockT == 1:\n                    tL = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.t{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockR = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]), se=True)\n\n\n                if lockR == 1:\n                    tL = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.r{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockS = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]), se=True)\n\n\n                if lockS == 1:\n                    tL = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.s{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n        if \"_R_\" in item:\n            mirrorCtrl = item.replace('_R_', '_L_')\n            for i in range(3):\n                lockT = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]), se=True)\n\n\n                if lockT == 1:\n                    tL = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.t{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockR = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]), se=True)\n\n\n                if lockR == 1:\n                    tL = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.r{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockS = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]), se=True)\n\n\n                if lockS == 1:\n                    tL = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.s{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n\n            attrSel = cmds.listAttr(item, k=True)\n            for attr in attrSel:\n                if not \"translate\" in attr:\n                    if not \"rotate\" in attr:\n                        if not \"scale\" in attr:\n                            atL = cmds.getAttr(\"{}.{}\".format(item, attr))\n                            atR = cmds.getAttr(\"{}.{}\".format(mirrorCtrl, attr))\n\n\n                            cmds.setAttr(\"{}.{}\".format(item, attr), atR)\n                            cmds.setAttr(\"{}.{}\".format(mirrorCtrl, attr), atL)\n\n\n\n        if not \"_R_\" in item:\n            if not \"_L_\" in item:\n                lockT = cmds.getAttr(\"{}.tx\".format(item), se=True)\n                if lockT == 1:\n                    t = cmds.getAttr(\"{}.tx\".format(item))\n                    cmds.setAttr(\"{}.tx\".format(item), -t)\n\n\n\n                lockR = cmds.getAttr(\"{}.ry\".format(item), se=True)\n                if lockR == 1:\n                    r = cmds.getAttr(\"{}.ry\".format(item))\n                    cmds.setAttr(\"{}.ry\".format(item), -r)\n\n\n\n                lockR = cmds.getAttr(\"{}.rz\".format(item), se=True)\n                if lockR == 1:\n                    r = cmds.getAttr(\"{}.rz\".format(item))\n                    cmds.setAttr(\"{}.rz\".format(item), -r)\n\n\n\n\n    mouth = (\"smileSad_L\", \"wideNarrow_L\")\n    mouthSide = (\"\", \"\")\n\n\n    for selObj in listSelMirror:\n        if \"lipsControl\" in selObj:\n            attrSel = cmds.listAttr(selObj, k=True)\n            for attr in attrSel:\n                for item in mouth:\n                    if item == attr:\n                        atL = cmds.getAttr(\"{}.{}\".format(selObj, item))\n                        mirrorAttr = item.replace(\"_L\", \"_R\")\n                        atR = cmds.getAttr(\"{}.{}\".format(selObj, mirrorAttr))\n\n\n                        cmds.setAttr(\"{}.{}\".format(selObj, mirrorAttr), atL)\n                        cmds.setAttr(\"{}.{}\".format(selObj, item), atR)\n\n\n                for item in mouthSide:\n                    if not item == \"\":\n                        if item == attr:\n                            at = cmds.getAttr(\"{}.{}\".format(selObj, item))\n\n\n                            cmds.setAttr(\"{}.{}\".format(selObj, item), -at)\n\n\n\ndef MIRROR_SELECTION_POSE_DB(*args):\n    axisS = (\"x\",\"y\",\"z\")\n\n\n    listSelMirror = cmds.ls(sl=True,fl=True)\n    for item in listSelMirror:\n        if \"_L_\" in item:\n            mirrorCtrl = item.replace('_L_', '_R_')\n            for i in range(3):\n                lockT = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]), se=True)\n\n\n                if lockT == 1:\n                    tL = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockR = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]), se=True)\n\n\n                if lockR == 1:\n                    tL = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockS = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]), se=True)\n\n\n                if lockS == 1:\n                    tL = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n        if \"_R_\" in item:\n            mirrorCtrl = item.replace('_R_', '_L_')\n            for i in range(3):\n                lockT = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]), se=True)\n\n\n                if lockT == 1:\n                    tL = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockR = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]), se=True)\n\n\n                if lockR == 1:\n                    tL = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockS = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]), se=True)\n\n\n                if lockS == 1:\n                    tL = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n            attrSel = cmds.listAttr(item, k=True)\n            for attr in attrSel:\n                if not \"translate\" in attr:\n                    if not \"rotate\" in attr:\n                        if not \"scale\" in attr:\n                            atL = cmds.getAttr(\"{}.{}\".format(item, attr))\n                            atR = cmds.getAttr(\"{}.{}\".format(mirrorCtrl, attr))\n\n\n                            cmds.setAttr(\"{}.{}\".format(item, attr), atR)\n                            cmds.setAttr(\"{}.{}\".format(mirrorCtrl, attr), atL)\n\n\n\n        if not \"_R_\" in item:\n            if not \"_L_\" in item:\n                lockT = cmds.getAttr(\"{}.tx\".format(item), se=True)\n                if lockT == 1:\n                    t = cmds.getAttr(\"{}.tx\".format(item))\n                    cmds.setAttr(\"{}.tx\".format(item), -t)\n\n\n\n                lockR = cmds.getAttr(\"{}.ry\".format(item), se=True)\n                if lockR == 1:\n                    r = cmds.getAttr(\"{}.ry\".format(item))\n                    cmds.setAttr(\"{}.ry\".format(item), -r)\n\n\n\n                lockR = cmds.getAttr(\"{}.rz\".format(item), se=True)\n                if lockR == 1:\n                    r = cmds.getAttr(\"{}.rz\".format(item))\n                    cmds.setAttr(\"{}.rz\".format(item), -r)\n\n\n\ndef MIRROR_CHARACTER_POSE_DB(*args):\n    axisS = (\"x\",\"y\",\"z\")\n\n\n    listSelMirror = cmds.ls(sl=True,fl=True)\n    for item in listSelMirror:\n        if \"_L_\" in item:\n            mirrorCtrl = item.replace('_L_', '_R_')\n            for i in range(3):\n                lockT = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]), se=True)\n\n\n                if lockT == 1:\n                    tL = cmds.getAttr(\"{}.t{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.t{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.t{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockR = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]), se=True)\n\n\n                if lockR == 1:\n                    tL = cmds.getAttr(\"{}.r{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.r{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.r{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n                lockS = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]), se=True)\n\n\n                if lockS == 1:\n                    tL = cmds.getAttr(\"{}.s{}\".format(item, axisS[i]))\n                    tR = cmds.getAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]))\n\n\n                    cmds.setAttr(\"{}.s{}\".format(item, axisS[i]), tR)\n                    cmds.setAttr(\"{}.s{}\".format(mirrorCtrl, axisS[i]), tL)\n\n\n            attrSel = cmds.listAttr(item, k=True)\n            for attr in attrSel:\n                if not \"translate\" in attr:\n                    if not \"rotate\" in attr:\n                        if not \"scale\" in attr:\n                            atL = cmds.getAttr(\"{}.{}\".format(item, attr))\n                            atR = cmds.getAttr(\"{}.{}\".format(mirrorCtrl, attr))\n\n\n                            cmds.setAttr(\"{}.{}\".format(item, attr), atR)\n                            cmds.setAttr(\"{}.{}\".format(mirrorCtrl, attr), atL)\n\n\n\n        if not \"_R_\" in item:\n            if not \"_L_\" in item:\n                lockT = cmds.getAttr(\"{}.tx\".format(item), se=True)\n                if lockT == 1:\n                    t = cmds.getAttr(\"{}.tx\".format(item))\n                    cmds.setAttr(\"{}.tx\".format(item), -t)\n\n\n\n                lockR = cmds.getAttr(\"{}.ry\".format(item), se=True)\n                if lockR == 1:\n                    r = cmds.getAttr(\"{}.ry\".format(item))\n                    cmds.setAttr(\"{}.ry\".format(item), -r)\n\n\n\n                lockR = cmds.getAttr(\"{}.rz\".format(item), se=True)\n                if lockR == 1:\n                    r = cmds.getAttr(\"{}.rz\".format(item))\n                    cmds.setAttr(\"{}.rz\".format(item), -r)\n\n\n\n    mouth = (\"smileSad_L\", \"wideNarrow_L\")\n    mouthSide = (\"\", \"\")\n\n\n    attrSel = cmds.listAttr(\"lipsControl\", k=True)\n    for attr in attrSel:\n        for item in mouth:\n            if item == attr:\n                atL = cmds.getAttr(\"lipsControl.{}\".format(item))\n                mirrorAttr = item.replace(\"_L\", \"_R\")\n                atR = cmds.getAttr(\"lipsControl.{}\".format(mirrorAttr))\n\n\n                cmds.setAttr(\"lipsControl.{}\".format(mirrorAttr), atL)\n                cmds.setAttr(\"lipsControl.{}\".format(item), atR)\n\n\n        for item in mouthSide:\n            if not item == \"\":\n                if item == attr:\n                    at = cmds.getAttr(\"lipsControl.{}\".format(item))\n\n\n                    cmds.setAttr(\"lipsControl.{}\".format(item), -at)\n\n\n\n\n\n'''\nARM_L\n\n\nabxPickerSelect \"arm_L_main elbow_L_main wrist_L_main\";\npython(\"jntList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"armFK_L_ctrl elbowFK_L_ctrl handFK_L_ctrl\";\npython(\"ctrlList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"arm_L_IK\";\npython(\"selIK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"arm_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\npython(\"ARM_FK_TO_IK_DB()\")\nselect -cl;\nabxPickerSelect \"arm_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nabxPickerSelect \"arm_L_ikfk_switch\";\n\n\n\nARM_R\n\n\nabxPickerSelect \"arm_R_main elbow_R_main wrist_R_main\";\npython(\"jntList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"armFK_R_ctrl elbowFK_R_ctrl handFK_R_ctrl\";\npython(\"ctrlList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"arm_R_IK\";\npython(\"selIK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"arm_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\npython(\"ARM_FK_TO_IK_DB()\")\nselect -cl;\nabxPickerSelect \"arm_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nabxPickerSelect \"arm_R_ikfk_switch\";\n\n\n\nLEG_L\n\n\nabxPickerSelect \"leg_L_fk_snap knee_L_fk_snap ankel_L_fk_snap\";\npython(\"jntList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"legFK_L_ctrl kneeFK_L_ctrl footFK_L_ctrl\";\npython(\"ctrlList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"leg_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\npython(\"LEG_FK_TO_IK_DB()\")\nselect -cl;\nabxPickerSelect \"leg_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nabxPickerSelect \"leg_L_ikfk_switch\";\n\n\n\nLEG_R\n\n\nabxPickerSelect \"leg_R_fk_snap knee_R_fk_snap ankel_R_fk_snap\";\npython(\"jntList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"legFK_R_ctrl kneeFK_R_ctrl footFK_R_ctrl\";\npython(\"ctrlList = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"leg_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\npython(\"LEG_FK_TO_IK_DB()\")\nselect -cl;\nabxPickerSelect \"leg_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nabxPickerSelect \"leg_R_ikfk_switch\";\n'''\n\n\ndef ARM_FK_TO_IK_DB(*args):\n    SNAP_FK_TO_IK_ARM_DB(jntList, ctrlList, selIK)\n\n\ndef LEG_FK_TO_IK_DB(*args):\n    SNAP_FK_TO_IK_LEG_DB(jntList, ctrlList)\n\n\ndef SNAP_FK_TO_IK_ARM_DB(i_jntList, i_ctrlList, i_position):\n    axisS = (\"x\",\"y\",\"z\")\n    locSnap = \"snapLocArm_01\"\n\n\n    for i in range(3):\n        for n in range(3):\n            lockR = cmds.getAttr(\"{}.r{}\".format(i_ctrlList[i], axisS[n]), se=True)\n            if lockR == 1:\n                r = cmds.getAttr(\"{}.r{}\".format(i_jntList[i], axisS[n]))\n                cmds.setAttr(\"{}.r{}\".format(i_ctrlList[i], axisS[n]), r)\n\n\n    cmds.spaceLocator(n=locSnap)\n\n\n    poiCon = cmds.pointConstraint(i_position, locSnap)\n    cmds.delete(poiCon)\n    poiCon = cmds.pointConstraint(locSnap, i_ctrlList[0])\n    cmds.delete(poiCon, locSnap)\n\n\n\ndef SNAP_FK_TO_IK_LEG_DB(i_jntList, i_ctrlList):\n    locSnap = (\"snapLocLeg_01\", \"snapLocLeg_02\", \"snapLocLeg_03\")\n\n\n    for i in range(3):\n        cmds.spaceLocator(n=locSnap[i])\n\n\n        parCon = cmds.parentConstraint(i_jntList[i], locSnap[i])\n        cmds.delete(parCon)\n\n\n    parCon = cmds.parentConstraint(locSnap[0], i_ctrlList[0])\n    cmds.delete(parCon)\n    oriCon = cmds.orientConstraint(locSnap[1], i_ctrlList[1])\n    cmds.delete(oriCon)\n    oriCon = cmds.orientConstraint(locSnap[2], i_ctrlList[2])\n    cmds.delete(oriCon)\n\n\n    cmds.delete(\"snapLocLeg_01\", \"snapLocLeg_02\", \"snapLocLeg_03\")\n\n\n\n\n\n'''\nARM_L\n\n\nabxPickerSelect \"armIK_L_ctrl pv_L_arm_ctrl handIK_L_ctrl\";\npython(\"ctrlListIK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"armFK_L_ctrl elbowFK_L_ctrl handFK_L_ctrl\";\npython(\"ctrlListFK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"arm_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nselect -cl;\npython(\"IK_TO_FK_DB()\")\nselect -cl;\nabxPickerSelect \"arm_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\nabxPickerSelect \"pv_L_arm_ctrl\";\nmove -r -os -wd 0 0 -1 ;\nselect -cl;\nabxPickerSelect \"arm_L_ikfk_switch\";\n\n\n\nARM_R\n\n\nabxPickerSelect \"armIK_R_ctrl pv_R_arm_ctrl handIK_R_ctrl\";\npython(\"ctrlListIK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"armFK_R_ctrl elbowFK_R_ctrl handFK_R_ctrl\";\npython(\"ctrlListFK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"arm_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nselect -cl;\npython(\"IK_TO_FK_DB()\")\nselect -cl;\nabxPickerSelect \"arm_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\nabxPickerSelect \"pv_R_arm_ctrl\";\nmove -r -os -wd 0 0 -1 ;\nselect -cl;\nabxPickerSelect \"arm_R_ikfk_switch\";\n\n\n\nLEG_L\n\n\nabxPickerSelect \"legIK_L_ctrl pv_L_leg_ctrl footIK_L_ctrl\";\npython(\"ctrlListIK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"legFK_L_ctrl kneeFK_L_ctrl footFK_L_ctrl\";\npython(\"ctrlListFK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"leg_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nselect -cl;\npython(\"IK_TO_FK_DB()\")\nselect -cl;\nabxPickerSelect \"leg_L_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\nabxPickerSelect \"pv_L_leg_ctrl\";\nmove -r -os -wd 0 0 1 ;\nselect -cl;\nabxPickerSelect \"leg_L_ikfk_switch\";\n\n\nLEG_R\n\n\nabxPickerSelect \"legIK_R_ctrl pv_L_leg_ctrl footIK_L_ctrl\";\npython(\"ctrlListIK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"legFK_R_ctrl kneeFK_L_ctrl footFK_L_ctrl\";\npython(\"ctrlListFK = cmds.ls(sl=True, fl=True)\")\nselect -cl;\nabxPickerSelect \"leg_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 0)\")\nselect -cl;\npython(\"IK_TO_FK_DB()\")\nselect -cl;\nabxPickerSelect \"leg_R_ikfk_switch\";\npython(\"ikfkSwitch_DB = cmds.ls(sl=True, fl=True); cmds.setAttr('.ikfk'.format(ikfkSwitch_DB), 1)\")\nselect -cl;\nabxPickerSelect \"pv_R_leg_ctrl\";\nmove -r -os -wd 0 0 1 ;\nselect -cl;\nabxPickerSelect \"leg_R_ikfk_switch\";\n\n\n'''\n\n\n\ndef IK_TO_FK_DB(*args):\n    SNAP_IK_TO_FK_DB(ctrlListFK, ctrlListIK)\n\n\ndef SNAP_IK_TO_FK_DB(i_ctrlListFK, i_ctrlListIK):\n    locSnap = (\"snapLocLeg_01\", \"snapLocLeg_02\", \"snapLocLeg_03\")\n\n\n    for i in range(3):\n        cmds.spaceLocator(n=locSnap[i])\n\n\n        parCon = cmds.parentConstraint(i_ctrlListFK[i], locSnap[i])\n        cmds.delete(parCon)\n\n\n    poiCon = cmds.pointConstraint(locSnap[0], i_ctrlListIK[0])\n    cmds.delete(poiCon)\n\n\n    parCon = cmds.parentConstraint(locSnap[1], i_ctrlListIK[1])\n    cmds.delete(parCon)\n\n\n    parCon = cmds.parentConstraint(locSnap[2], i_ctrlListIK[2])\n    cmds.delete(parCon)\n\n\n    cmds.delete(\"snapLocLeg_01\", \"snapLocLeg_02\", \"snapLocLeg_03\")\n\n\n\n\n\n'''\nLIPS RESET\n\n\n\nabxPickerSelect  \"lipsControl\";\nstring $currentSelection[] = `ls -sl -fl`;\nstring $attrChanelBox[] = `listAttr -k`;\nfor( $item in $attrChanelBox ){\n    setAttr ($currentSelection[0] + \".\" + $item) 0;\n}\n'''" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "abxPicker" ( "global proc abxPicker(){\n\tif (`window -q -ex abxPickerWindow`){\n\t\tshowWindow abxPickerWindow;\n\t}\n\telse{\n\tstring $parent = `window -w 200 -h 300 -t abxPicker -tlb true abxPickerWindow`;\n\t$panelName = \"abxPicker\";\n\tsetParent $parent;\n\t$panelName = `formLayout -w 500 -h 500 $panelName`;\n\t//tabLayout -e -tabLabel $panelName \"Picker\" $parent;\n\t\n\t//--------------Toolbar Layout-----------------------\n\trowLayout -nc 5 -adj 3 -co5 0 0 2 0 0 -cw5 23 23 67 23 23 -ct5 \"both\" \"both\" \"both\" \"both\" \"both\" -cl5 \"center\" \"center\" \"right\" \"center\" \"center\" abxPickerToolbar;\n\t\ticonTextButton -ann \"New Picker Sheet\" -image \"fileNew.xpm\" -w 23 -h 23 -command \"layout -e -visible false abxPickerCharTabs;layout -e -visible true abxPickerNewForm\";\n\t\ticonTextButton -ann \"Save Picker Sheet\" -di \"fileNew.xpm\" -image \"fileSave.xpm\" -vis false -w 23 -h 23 -command \"abxPickerWriteNode `tabLayout -q -st (eval(\\\"tabLayout -q -st abxPickerCharTabs\\\"))`;iconTextButton -e -vis false abxPickerSave;\" abxPickerSave;\n\t\ttextField -ann \"Character Menu\" -editable false -text \"None\" abxPickerCharText;\n\t\t\tpopupMenu -b 1 abxPickerCharMenu;\n\t\ticonTextButton -ann \"Redraw Picker Sheet\" -image \"autoload.xpm\" -w 23 -h 23 -command \"abxPickerRefresh\";\n\t\ticonTextButton -ann \"Help\" -style \"iconOnly\" -w 23 -h 23 -image \"pickOtherComp.xpm\" -label \"?\" -command \"abxPickerHelp\";\n\t\t\n\t\t\n\t\tsetParent..;\n\n\t//--------------Picker Tab Layout--------------------\n\ttabLayout -tabsVisible false -imw 0 -imh 0 abxPickerCharTabs;\n\t\tabxPickerRefresh;\n\tsetParent..;\n\t\n\t//--------------Bottom Toolbar Layout-----------------\n\tcolumnLayout -parent $panelName -w 400 -cal \"center\" -cat \"both\" 0 -adj true abxPickerColLyt;\n\trowLayout  -cw 1 17 -cw 2 17 -cw 3 17 -cw 4 17 -cw 5 20 -cw 6 20 -cw 7 20 -cw 8 20 -cw 9 20 -nc 9 -adj 8;\n\n\ticonTextButton -style \"iconOnly\" -ann \"Drag and Drop: Red\" -dtg \"0:0:.7:.4:.4\" -w 16 -h 16 -bgc .7 .4 .4 -dgc \"abxPickerCtrlNew\";\n\ticonTextButton -style \"iconOnly\" -ann \"Drag and Drop: Green\" -dtg \"0:0:.4:.7:.4\" -w 16 -h 16 -bgc .4 .7 .4 -dgc \"abxPickerCtrlNew\";\n\ticonTextButton -style \"iconOnly\" -ann \"Drag and Drop: Blue\" -dtg \"0:0:.4:.5:.7\" -w 16 -h 16 -bgc .4 .5 .7 -dgc \"abxPickerCtrlNew\";\n\ticonTextButton -style \"iconOnly\" -ann \"Drag and Drop: Yellow\" -dtg \"0:0:.7:.7:.4\" -w 16 -h 16 -bgc .7 .7 .4 -dgc \"abxPickerCtrlNew\";\n\ticonTextButton -style \"textOnly\" -ann \"Command: Select Current\" -label \"Sl\" -w 19 -h 16 -bgc .5 .5 .5 -dgc \"abxPickerCtrlCommand\" -c \"/*select*/\";\n\ticonTextButton -style \"textOnly\" -ann \"Command: Select Current and Translate\" -label \"T\" -w 19 -h 16 -bgc .5 .5 .5 -dgc \"abxPickerCtrlCommand\" -c \"/*selectT*/\";\n\ticonTextButton -style \"textOnly\" -ann \"Command: Select Current and Rotate\" -label \"R\" -w 19 -h 16 -bgc .5 .5 .5 -dgc \"abxPickerCtrlCommand\" -c \"/*selectR*/\";\n\ticonTextButton -style \"textOnly\" -l \"More...\" -w 16 -h 16 -c \"abxPickerBuildToolbox\" ;\n\ticonTextButton -mw 0 -mh 0 -ann \"Trash: Drag ctrls here to Delete\" -style \"iconOnly\" -image \"smallTrash.xpm\" -w 20 -h 17 -dpc \"abxPickerCtrlTrash\";\n\tsetParent..;\n\t\n\t//--------------New Picker Layout -------------------\n\tcolumnLayout -visible false -rs 2 -cat \"both\" 3 -adj true -parent $panelName abxPickerNewForm;\n\t\ttextFieldGrp -adj 2 -cw 1 50 -label \"Name\" -text \"Character\" abxPickerCharNameTxt;\n\t\ttextFieldGrp -adj 2 -cw 1 50 -label \"SubSet\" -text  \"Main\" abxPickerSubNameTxt;\n\t\ttextFieldButtonGrp -adj 2 -cw 1 50 -cw 3 30 -label \"Image\" -text \"\" -buttonLabel \"B..\" -bc \"fileBrowserDialog -m 0 -fc \\\"abxPickerBrowsePath\\\"  -an \\\"Choose Background Image\\\" -ds 0\" abxPickerImagePath;\n\t\tcolorSliderGrp -adj 3 -cw 1 50 -cw 2 30 -label \"Color\" -rgb .4 .4 .4 abxPickerBGColor;\n\t\trowLayout -adj 1 -nc 3 -cw3 10 50 50 -ct3 \"both\" \"both\" \"both\" -cl3 \"center\" \"center\" \"center\" -co3 5 5 5;\n\t\t\tbutton -visible false;\n\t\t\tbutton -label \"OK\" -c \"abxPickerNewSheet;layout -e -visible true abxPickerCharTabs;layout -e -visible false abxPickerNewForm\" ;\n\t\t\tbutton -label \"Cancel\" -c \"layout -e -visible true abxPickerCharTabs;layout -e -visible false abxPickerNewForm\";\n\t\tsetParent..;\n\t\ttext -al \"center\" -label \"Tip: Leave \\\"Name\\\" field blank\\n when using referencing with\\n rename prefixes or namespaces\"; \n\n\n\tformLayout -e \n\t\t-af abxPickerToolbar \"top\" 0\n\t\t-af abxPickerToolbar \"left\" 0\n\t\t-af abxPickerToolbar \"right\" 0\n\t\t-aof abxPickerToolbar \"bottom\" -24\n\n\t\t-af abxPickerCharTabs \"top\" 24\n\t\t-af abxPickerCharTabs \"left\" 0\n\t\t-af abxPickerCharTabs \"right\" 0\n\t\t-ap abxPickerCharTabs \"bottom\" 18 100\n\n\t\t-af abxPickerNewForm \"top\" 24\n\t\t-af abxPickerNewForm \"left\" 0\n\t\t-af abxPickerNewForm \"right\" 0\n\t\t-ap abxPickerNewForm \"bottom\" 20 100\n\n\t\t-aof abxPickerColLyt \"top\" -17\n\t\t-af abxPickerColLyt \"left\" 1\n\t\t-af abxPickerColLyt \"right\" 1\n\t\t-ap abxPickerColLyt \"bottom\" 1 100\n\n\t\t$panelName;\n\t\t\n\t// create script job to refresh picker window on scene loads\n\tstring $listArray[] = `scriptJob -lj`;\n\tstring $tokenBuffer[];\n\tint $foundJob = 0;\n\tint $jobNum =0;\n\t\n\tfor ($i=0;$i<size($listArray);$i++){\n\t\t// if the script jobs are found Kill them\n\t\tif (`gmatch $listArray[$i] \"*abxPickerScriptJob*\"`){\n\t\t\ttokenize $listArray[$i] \":\" $tokenBuffer;\n\t\t\t$JobNum = $tokenBuffer[0];\n\t\t\t//scriptJob -k (int($JobNum));\n\t\t\t$foundJob = 1;\n\t\t}\n\t}\n\t// if no script jobs were found then start new ones\n\tif ($foundJob == 0) {\n\t\tint $jobNum = `scriptJob -e \"SceneOpened\" \"abxPickerScriptJob\"`;\n\t}\n\t\n\t//return $panelName;\n\tshowWindow $parent;\n\t}\n\n}\n\nglobal proc string[] abxPickerCtrlDrag(string $dragControl, int $x, int $y, int $mods){\n\n\tstring $msg[] = {\"move\", $x, $y, $mods};\n\treturn $msg;\n\n}\n\nglobal proc string[] abxPickerCtrlNew(string $dragControl, int $x, int $y, int $mods){\n\n\tstring $msg[] = {\"new\", $x, $y, $mods};\n\treturn $msg;\n}\n\nglobal proc string[] abxPickerCtrlColor(string $dragControl, int $x, int $y, int $mods){\n\n\tstring $msg[] = {\"color\", $x, $y, $mods};\n\treturn $msg;\n}\nglobal proc string[] abxPickerCtrlImage(string $dragControl, int $x, int $y, int $mods){\n\n\tstring $msg[] = {\"image\", $x, $y, $mods};\n\treturn $msg;\n}\nglobal proc string[] abxPickerCtrlCommand(string $dragControl, int $x, int $y, int $mods){\n\n\tstring $msg[] = {\"command\", $x, $y, $mods};\n\treturn $msg;\n}\nglobal proc string[] abxPickerCtrlLabel(string $dragControl, int $x, int $y, int $mods){\n\n\tstring $msg[] = {\"label\", $x, $y, $mods};\n\treturn $msg;\n}\nglobal proc abxPickerCtrlTrash(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type){\n\tif ($msgs[0] == \"move\")\n\t\tprint (\"deleteUI -control \\\"\" + $dragControl + \"\\\";\");\n}\n\n//-----------------------------------------------------------------------\n// form layout drop callback: handles various objects drop events\n\nglobal proc abxPickerCtrlDrop(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type){\n\n\ticonTextButton -e -vis true abxPickerSave;\n\n\tstring $op = $msgs[0];\n\tint $mods = $msgs[3];\n\tint $startX = $msgs[1];\n\tint $startY = $msgs[2];\n\n\tstring $ctrlData = `iconTextButton -q -dtg $dragControl`;\n\tstring $tokenBuffer[];\n\ttokenize $ctrlData \":\" $tokenBuffer;\n\t\n\tif ($op == \"move\"){\n\n\t\tswitch ($mods){\n\t\tcase 0:\n\t\t\t//print (\"XPos=\"+$x+\" YPos=\"+$y+\"\\n\");\n\t\t\tint $ctrlWidth = `control -q -w $dragControl`;\n\t\t\tint $ctrlHeight = `control -q -h $dragControl`;\n\n\t\t\tint $ctrlLeftPos = ($x-$startX);\n\t\t\tint $ctrlTopPos = ($y-$startY);\n\t\t\tint $ctrlRightPos = (-1*(($x-$startX)+$ctrlWidth));\n\t\t\tint $ctrlBottomPos = (-1*(($y-$startY)+$ctrlHeight));\n\t\t\ticonTextButton -e -dtg ($ctrlLeftPos+\":\"+$ctrlTopPos+\":\"+$tokenBuffer[2]+\":\"+$tokenBuffer[3]+\":\"+$tokenBuffer[4]) $dragControl;\n\t\t\t\n\t\t\tformLayout -e \n\t\t\t\t-ap $dragControl \"left\" $ctrlLeftPos 0\n\t\t\t\t-ap $dragControl \"top\" $ctrlTopPos 0\n\t\t\t\t-ap $dragControl \"right\" $ctrlRightPos 0\n\t\t\t\t-ap $dragControl \"bottom\" $ctrlBottomPos 0\n\t\t\t\t$dropControl;\n\t\t\tbreak;\n\t\t// duplicate button\n\t\tcase 1:\n\t\t\t$op = \"new\";\n\t\t\tbreak;\n\t\t\n\t\t//resize bottom right corner\n\t\tcase 2:\n\t\t\t//print (\"XPos=\"+$x+\" YPos=\"+$y+\"\\n\");\n\t\t\tint $ctrlLeftPos = $tokenBuffer[0];\n\t\t\tint $ctrlTopPos = $tokenBuffer[1];\n\t\t\tint $ctrlRightPos = (-1*$x);\n\t\t\tint $ctrlBottomPos = (-1*$y);\n\t\t\t//print ($x+\" \"+$ctrlLeftPos+\" \"+$y+\" \"+$ctrlTopPos+\"\\n\");\n\t\t\tif ($x < $ctrlLeftPos+8)\n\t\t\t\t$ctrlRightPos = (-1*($ctrlLeftPos+8));\n\t\t\tif ($y < $ctrlTopPos+8)\n\t\t\t\t$ctrlBottomPos = (-1*($ctrlTopPos+8));\n\t\t\t\t\t\n\t\t\tformLayout -e \n\t\t\t\t-ap $dragControl \"right\" $ctrlRightPos 0\n\t\t\t\t-ap $dragControl \"bottom\" $ctrlBottomPos 0\n\t\t\t\t$dropControl;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($op == \"color\"){\n\t\tstring $colorControl = abxDropOnButton($dropControl,$x,$y);\n\t\tif ($colorControl != \"\"){\n\t\t\teval(\"iconTextButton -e -bgc \"+$tokenBuffer[2]+\" \"+$tokenBuffer[3]+\" \"+$tokenBuffer[4]+\" \"+$colorControl);\n\t\t\tstring $colorControlLabel = `iconTextButton -q -dtg $colorControl`;\n\t\t\tstring $colorTBuffer[];\n\t\t\ttokenize $colorControlLabel \":\" $colorTBuffer;\n\t\t\ticonTextButton -e -dtg ($colorTBuffer[0]+\":\"+$colorTBuffer[1]+\":\"+$tokenBuffer[2]+\":\"+$tokenBuffer[3]+\":\"+$tokenBuffer[4]) $colorControl;\n\t\t}\t\n\t\telse\n\t\t\t$op = \"new\";\n\t}\n\tif ($op == \"command\"){\n\t\tstring $colorControl = abxDropOnButton($dropControl,$x,$y);\n\t\tif ($colorControl != \"\"){\n\t\t\tstring $command = `iconTextButton -q -c $dragControl`;\n\t\t\tif ($command == \"/*select*/\"){\n\t\t\t\t$slNodes = `ls -sl`;\n\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\tfor ($each in $slNodes)\n\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerSelect \"+$cmd+\"\\\"\") $colorControl;\n\t\t\t\tprint (\"Command Changed\\n\"); \n\t\t\t}\n\t\t\telse if ($command == \"/*selectT*/\"){\n\t\t\t\t$slNodes = `ls -sl`;\n\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\tfor ($each in $slNodes)\n\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerSelect \"+$cmd+\"\\\";setToolTo moveSuperContext\") $colorControl;\n\t\t\t\tprint (\"Command Changed\\n\"); \n\t\t\t}\n\t\t\telse if ($command == \"/*selectR*/\"){\n\t\t\t\t$slNodes = `ls -sl`;\n\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\tfor ($each in $slNodes)\n\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerSelect \"+$cmd+\"\\\";setToolTo RotateSuperContext\") $colorControl;\n\t\t\t\tprint (\"Command Changed\\n\"); \n\t\t\t}\n\t\t\telse if ($command == \"/*key*/\"){\n\t\t\t\t$slNodes = `ls -sl`;\n\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\tfor ($each in $slNodes)\n\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerKey \"+$cmd+\"\\\"\") $colorControl;\n\t\t\t\tprint (\"Command Changed\\n\"); \n\t\t\t}\n\t\t\telse if ($command == \"/*selectS*/\"){\n\t\t\t\t$slNodes = `ls -sl`;\n\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\tfor ($each in $slNodes)\n\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerSelect \"+$cmd+\"\\\";setToolTo scaleSuperContext\") $colorControl;\n\t\t\t\tprint (\"Command Changed\\n\"); \n\t\t\t}\n\t\t\telse if ($command == \"/*selectM*/\"){\n\t\t\t\t$slNodes = `ls -sl`;\n\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\tfor ($each in $slNodes)\n\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerSelect \"+$cmd+\"\\\";setToolTo ShowManips\") $colorControl;\n\t\t\t\tprint (\"Command Changed\\n\"); \n\t\t\t}\n\t\t\telse if ($command == \"/*toggle*/\"){\n\t\t\t\tstring $slNodes[] = `ls -sl`;\n\t\t\t\tstring $selectedChnl[] = `channelBox -q -sma mainChannelBox`;\n\t\t\t\t\n\t\t\t\tif(size($selectedChnl) != 0 && size($slNodes) != 0){\n\t\t\t\t\t$cmd = \"\\\"\";\n\t\t\t\t\tfor ($each in $slNodes){\n\t\t\t\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t\t\t\t}\n\t\t\t\t\t$attrs = \"\\\"\";\n\t\t\t\t\tfor ($each in $selectedChnl){\n\t\t\t\t\t\t$attrs = $attrs + \" \" + $each;\n\t\t\t\t\t}\n\t\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";abxPickerToggle \"+$cmd+\"\\\" \"+$attrs+\"\\\"\") $colorControl;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ticonTextButton -e -c (\"global string $pickrPrefix=\\\"\\\";\"+$command) $colorControl;\n\t\t\t}\n\t\t}\n\t}\n\tif ($op == \"label\"){\n\t\tstring $colorControl = abxDropOnButton($dropControl,$x,$y);\n\t\tif ($colorControl != \"\"){\n\t\t\tstring $label = `iconTextButton -q -l $dragControl`;\n\t\t\ticonTextButton -e -l $label $colorControl;\n\t\t}\n\t}\n\tif ($op == \"image\"){\n\t\tstring $colorControl = abxDropOnButton($dropControl,$x,$y);\n\t\tif ($colorControl != \"\"){\n\t\t\tstring $image = `iconTextButton -q -image $dragControl`;\n\t\t\t\n\t\t}\n\t}\n\tif ($op == \"new\"){\n\t\tsetParent $dropControl;\n\t\tint $ctrlWidth = `control -q -w $dragControl`;\n\t\tint $ctrlHeight = `control -q -h $dragControl`;\n\t\tstring $image = `iconTextButton -q -image $dragControl`;\n\t\tstring $data = `iconTextButton -q -dtg $dragControl`;\n\t\tstring $label = `iconTextButton -q -l $dragControl`;\n\t\tstring $tokenBuffer[];\n\t\ttokenize $data \":\" $tokenBuffer;\n\t\t$slNodes = `ls -sl`;\n\t\t$cmd = \"\\\"\";\n\n\t\tfor ($each in $slNodes)\n\t\t\t$cmd = $cmd + \" \" + $each;\n\t\t$newCtrl = abxPickerNewButton(($x-($ctrlWidth/2)),($y-($ctrlHeight/2)),$ctrlWidth,$ctrlHeight,$tokenBuffer[2],$tokenBuffer[3],$tokenBuffer[4],$image,(\"global string $pickrPrefix=\\\"\\\";abxPickerSelect \"+$cmd+\"\\\"\"),$label);\n\t\t\n\t\tint $newCtrlWidth = `control -q -w $newCtrl`;\n\t\tint $newCtrlHeight = `control -q -h $newCtrl`;\n\t\tformLayout -e \n\t\t\t-ap $newCtrl \"left\" ($x-($newCtrlWidth/2)) 0\n\t\t\t-ap $newCtrl \"top\" ($y-($newCtrlHeight/2)) 0\n\t\t\t-ap $newCtrl \"right\" (-1*(($x-($newCtrlWidth/2))+$newCtrlWidth)) 0\n\t\t\t-ap $newCtrl \"bottom\" (-1*(($y-($newCtrlHeight/2))+$newCtrlHeight)) 0\n\t\t\t$dropControl;\n\t}\n\n\n}\n//------------------------------------------------------------------------\n// returns the name of the button if any the drop was over\nglobal proc string abxDropOnButton(string $picker, int $x, int $y) {\n\tint $buttonCount = `layout -q -nch $picker`;\n\tstring $uiName[] = `layout -q -ca $picker`;\n\tstring $pickerData = `layout -q -dtg $picker`;\n\n\tfor ($i=1;$i<$buttonCount;$i++){\n\t\tstring $data = `iconTextButton -q -dtg $uiName[$i]`;\n\t\tint $width = `control -q -width $uiName[$i]`;\n\t\tint $height = `control -q -height $uiName[$i]`;\n\n\t\tstring $dataBuffer[];\n\t\ttokenize $data \":\" $dataBuffer;\n\t\t\n\t\tint $leftPos = $dataBuffer[0];\n\t\tint $topPos = $dataBuffer[1];\n\t\tfloat $red = $dataBuffer[2];\n\t\tfloat $blue = $dataBuffer[3];\n\t\tfloat $green = $dataBuffer[4];\n\t\n\t\tif ($x>=$leftPos && $y>=$topPos && $x<=($leftPos+$width) && $y<=($topPos+$height)){\n\t\t\t//print ($x+\":\"+$y+\":::\"+$leftPos+\",\"+$topPos+\",\"+($leftPos+$width)+\",\"+($topPos+$height)+\"\\n\");\n\t\t\t//print ($uiName[$i]+\"\\n\");\n\t\t\t// flashes UI Color;\n\t\t\t//iconTextButton -e -bgc 1 1 1 $uiName[$i];\n\t\t\t//iconTextButton -e -bgc $red $green $blue $uiName[$i];\n\t\t\treturn $uiName[$i];\n\t\t}\n\t}\n\treturn \"\";\n\n}\n//------------------------------------------------------------------------\n//sets the position of the button using attach position commands to the form layout\n\nglobal proc abxPickerSetPos(string $parent, string $control, int $x, int $y,int $width, int $height){\n\n\tint $rightPos = ($x + $width)*-1;\n\tint $bottomPos = ($y + $height)*-1;\n\tint $parentWidth = `layout -q -w $parent`;\n\tint $parentHeight = `layout -q -h $parent`;\n\n\tformLayout -e \n\t\t-ap $control \"left\" $x 0\n\t\t-ap $control \"top\" $y 0\n\t\t-ap $control \"right\" $rightPos 0\n\t\t-ap $control \"bottom\" $bottomPos 0\n\t$parent;\n}\n\n//--------------------------------------------------------------------------\n// creates a new button and encodes the position/color data into the label\n\nglobal proc string abxPickerNewButton(int $ctrlX, int $ctrlY, int $ctrlWidth, int $ctrlHeight, float $bgr, float $bgg, float $bgb, string $image,string $command, string $label){\n\t\n\n\t// stores position and color data so it can be queried\n\t$data = ($ctrlX+\":\"+$ctrlY+\":\"+$bgr+\":\"+$bgg+\":\"+$bgb);\t\n\tstring $newCtrl = `iconTextButton -mh 0 -mw 0 -style \"iconAndTextVertical\" -l $label -dtg $data -w $ctrlWidth -h $ctrlHeight -bgc $bgr $bgg $bgb -dgc \"abxPickerCtrlDrag\" -c $command`;\n\treturn $newCtrl;\n\n}\n\n//-------------------------------------------------------------------------\n// shows the new form and creates a blank layout and node\n\nglobal proc abxPickerNewSheet () {\n\n\tglobal string $pickrPrefix;\n\tstring $characterName = `textFieldGrp -q -text abxPickerCharNameTxt`;\n\tstring $characterName2 = \"\";\n\tif ($characterName != \"\")\n\t\t$characterName2 = ($characterName + \"_\");\n\tstring $subCharName = `textFieldGrp -q -text abxPickerSubNameTxt`;\n\tstring $bgImage = `textFieldButtonGrp -q -text abxPickerImagePath`;\n\tfloat  $bgColor[] = `colorSliderGrp -q -rgb abxPickerBGColor`;\t\n\tstring $bgPic;\n\n\tif (!`tabLayout -q -ex ($characterName+\"PkrLyt\")`){\n\t\ttabLayout -parent abxPickerCharTabs ($characterName+\"PkrLyt\");\n\t\t//menuItem -parent \"abxPickerCharMenu\" -label $characterName -c (\"tabLayout -e -st \"+$characterName+\"PkrLyt abxPickerCharTabs;textField -e -text \"+$characterName+\" abxPickerCharText\");\n\t}\n\tif ($characterName == \"\")\n\t\tformLayout -parent ($characterName+\"PkrLyt\") -dtg (\" |\"+$subCharName+\"|\"+$bgColor[0]+\"|\"+$bgColor[1]+\"|\"+$bgColor[1]) -bgc $bgColor[0] $bgColor[1] $bgColor[2] -dpc \"abxPickerCtrlDrop\" ($characterName2+$subCharName+\"PkrLyt\");\n\telse\n\t\tformLayout -parent ($characterName+\"PkrLyt\") -dtg ($characterName2+\"|\"+$subCharName+\"|\"+$bgColor[0]+\"|\"+$bgColor[1]+\"|\"+$bgColor[1]) -bgc $bgColor[0] $bgColor[1] $bgColor[2] -dpc \"abxPickerCtrlDrop\" ($characterName2+$subCharName+\"PkrLyt\");\n\t\tif (`filetest -f $bgImage`){\n\t\t\t$bgPic = `symbolButton -enable false -image $bgImage -bgc $bgColor[0] $bgColor[1] $bgColor[2]`;\n\t\t\t//int $tmpWidth = `control -q -w $bgPic`;\n\t\t\t//int $tmpHeight = `control -q -h $bgPic`;\n\t\t\t//deleteUI -control $bgPic;\n\t\t\t//$bgPic = `iconTextButton -mh 0 -mw 0 -w $tmpWidth -h $tmpHeight -enable false -bgc $bgColor[0] $bgColor[1] $bgColor[2] -image $bgImage`;\t\n\t\t}\n\t\telse {\n\t\t\t$bgPic = `symbolButton -visible false -bgc $bgColor[0] $bgColor[1] $bgColor[2]`;\t\n\t\t}\n\t\ttabLayout -e -tabLabel ($characterName2+$subCharName+\"PkrLyt\") $subCharName ($characterName+\"PkrLyt\");\n\t\tformLayout -e \n\t\t\t-af $bgPic \"top\" -2 \n\t\t\t-af $bgPic \"left\" -2 \n\t\t\t-an $bgPic \"right\" \n\t\t\t-an $bgPic \"bottom\" \n\t\t\t($characterName2+$subCharName+\"PkrLyt\");\n\n\t\tsetParent ..;\n\t$pickrPrefix = \"\";\n\tif ($characterName == \"\"){\n\t\tabxPickerNewNode ($characterName2+$subCharName+\"_PIKR\") $bgImage ($bgColor[0]+\":\"+$bgColor[1]+\":\"+$bgColor[1]) 1 ;\n\t\t}\n\telse{\n\t\tabxPickerNewNode ($characterName2+$subCharName+\"_PIKR\") $bgImage ($bgColor[0]+\":\"+$bgColor[1]+\":\"+$bgColor[1]) 0 ;\n\t\t}\n\tif ($characterName != \"\")\n\t\t\tmenuItem -parent \"abxPickerCharMenu\" -label $characterName -c (\"abxPickerMenuCmd \\\"\"+$characterName+\"\\\"\");\n\telse\n\t\t\tmenuItem -parent \"abxPickerCharMenu\" -label \"*Prefix*\" -c (\"abxPickerMenuCmd \\\"\"+$characterName+\"\\\"\");\n\tabxPickerMenuCmd $characterName;\n\t//textField -e -text $characterName abxPickerCharText;\n\t//tabLayout -e -st ($characterName2+$subCharName+\"PkrLyt\") ($characterName+\"PkrLyt\");\n\t//tabLayout -e -st ($characterName+\"PkrLyt\") abxPickerCharTabs;\n\t\n\n}\n\n//-------------------------------------------------------------------------\n// deletes all current picker layouts and redraws them from the saved nodes\n\nglobal proc abxPickerRefresh () {\n\n\tstring $pickerNodes[] = `ls \"*_PIKR\"`;\n\tstring $loadedSheets[]; \n\tstring $lastChar; \n\tstring $charName;\n\tstring $charName2;\n\tstring $subName;\n\tstring $tokenBuffer[];\n\t$pickerNodes = stringArrayCatenate($pickerNodes,`ls \"*:*_PIKR\"`);\n\t\n\tif (`tabLayout -q -ex abxPickerCharTabs`){\n\t\t$loadedSheets = `tabLayout -q -ca abxPickerCharTabs`;\n\t\t$lastChar = `textField -q -text abxPickerCharText`;\n\t}\n\t\n\t// hides all pickersheets, deletes picker sheets and character menu items.\n\ttabLayout -e -visible false abxPickerCharTabs;\n\ttextField -e -text \"None\" abxPickerCharText;\n\tfor ($each in $loadedSheets)\n\t\tdeleteUI -layout $each;\n\tpopupMenu -e -dai abxPickerCharMenu;\n\n\tif (size($pickerNodes) > 0){\n\t\tsetParent abxPickerCharTabs;\n\n\t\tfor ($each in $pickerNodes){\n\t\t\t$charName=\"\";\n\t\t\ttokenize $each \":\" $tokenBuffer;\n\t\t\tif (size($tokenBuffer) < 2){\n\t\t\t\ttokenize $each \"_\" $tokenBuffer;\n\t\t\t\tif (size($tokenBuffer) >= 3){\n\t\t\t\t\t$charName = ($tokenBuffer[0]);\n\t\t\t\t\tfor ($i=1;$i<size($tokenBuffer)-2;$i++)\n\t\t\t\t\t\t$charName = ($charName + $tokenBuffer[$i]);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\t$charName = $tokenBuffer[0];\n\t\t\t}\n\t\t\tif (!`tabLayout -q -ex ($charName+\"PkrLyt\")`){\n\t\t\t\ttabLayout -parent abxPickerCharTabs ($charName+\"PkrLyt\");\n\t\t\t\tif ($charName != \"\")\n\t\t\t\t\tmenuItem -parent \"abxPickerCharMenu\" -label $charName -c (\"abxPickerMenuCmd \\\"\"+$charName+\"\\\"\");\n\t\t\t\telse\n\t\t\t\t\tmenuItem -parent \"abxPickerCharMenu\" -label \"*Prefix*\" -c (\"abxPickerMenuCmd \\\"\"+$charName+\"\\\"\");\n\t\t\t}\n\t\t}\t\t\n\t\tabxPickerMenuCmd $charName;\n\t}\n\n\ttabLayout -e -visible true abxPickerCharTabs;\t\n\n\tif (`tabLayout -exists ($lastChar+\"PkrLyt\")`){\n\t\ttabLayout -e -st ($lastChar+\"PkrLyt\") abxPickerCharTabs;\n\t\ttextField -e -text $lastChar abxPickerCharText;\n\t}\n\t\n}\n\n//----------------------------------------------------------------------\n// creates a new node and adds the custom attrs to store the picker data\n\nglobal proc int abxPickerNewNode (string $nodeName, string $bgImage, string $bgColor, int $charPrefix){\n\n\tif (objExists($nodeName)){\n\t\twarning \"Character and Sub Character already exists. Aborting\";\n\t\treturn 0;\n\t}\n\tcreateNode -name $nodeName \"geometryVarGroup\";\n\taddAttr -longName \"bgImage\" -dt \"string\";\n\tsetAttr ($nodeName+\".bgImage\") -type \"string\" $bgImage;\n\taddAttr -longName \"bgColor\" -dt \"string\";\n\tsetAttr ($nodeName+\".bgColor\") -type \"string\" $bgColor;\n\taddAttr -longName \"count\" -at \"long\";\n\taddAttr -longName \"data\" -dt \"stringArray\";\n\taddAttr -longName \"width\" -dt \"Int32Array\";\n\taddAttr -longName \"height\" -dt \"Int32Array\";\n\taddAttr -longName \"overlay\" -dt \"stringArray\";\n\taddAttr -longName \"command\" -dt \"stringArray\";\n\taddAttr -longName \"image\" -dt \"stringArray\";\n\taddAttr -longName \"label\" -dt \"stringArray\";\n\taddAttr -longName \"charPrefix\" -at bool;\n\tsetAttr ($nodeName+\".charPrefix\") $charPrefix;\n\treturn 1;\n}\n//-----------------------------------------------------------------------\n// reads the picker data from a node and draws the picker\n\nglobal proc abxPickerReadNode (string $node) {\n\n\t// declarations\n\tstring $tokenBuffer[];\n\tstring $tokenBuffer2[];\n\tstring $tokenBufferNS[];\n\tstring $bgColorBuffer[];\n\tstring $bgPic;\n\tstring $charName = \"\";\n\tstring $charName2 = \"\";\n\tstring $subName = \"\";\n\t// global prefix variable for passing to abxPickerSelect\n\tglobal string $pickrPrefix;\n\t\n\t// load the node into memory\n\tint $count = `getAttr ($node+\".count\")`;\n\tstring $bgImage = `getAttr ($node+\".bgImage\")`;\n\tstring $bgColor = `getAttr ($node+\".bgColor\")`;\n\tstring $data[] = `getAttr ($node+\".data\")`;\n\tint $width[] = `getAttr ($node+\".width\")`;\n\tint $height[] = `getAttr ($node+\".height\")`;\n\tstring $overlay[] = `getAttr ($node+\".overlay\")`;\n\tstring $command[] = `getAttr ($node+\".command\")`;\n\tstring $image[] = `getAttr ($node+\".image\")`;\n\tif (!attributeExists(\"label\",$node))\n\t\taddAttr -longName \"label\" -dt \"stringArray\" $node;\n\tstring $label[] = `getAttr ($node+\".label\")`;\n\tint $charPrefix =  `getAttr ($node+\".charPrefix\")`;\n\n\ttokenize $node \":\" $tokenBufferNS;\n\tif (size($tokenBufferNS)<2){\n\t\ttokenize $node \"_\" $tokenBuffer;\n\t\tif (size($tokenBuffer) >= 3){\n\t\t\t$charName = ($tokenBuffer[0]);\n\t\t\t$charName2 = ($tokenBuffer[0]+\"_\");\n\t\t\tfor ($i=1;$i<size($tokenBuffer)-2;$i++){\n\t\t\t\t$charName = ($charName + $tokenBuffer[$i]);\n\t\t\t}\n\t\t\t$subName = $tokenBuffer[size($tokenBuffer)-2];\n\t\t}\n\t\telse if (size($tokenBuffer) == 2){\n\t\t\t$charName = \"\";\n\t\t\t$charName2 = \"\";\n\t\t\t$subName = $tokenBuffer[0];\n\t\t}\t\n\t}\n\telse{\n\t\t\t$charName = $tokenBufferNS[0];\n\t\t\t$charName2 = ($tokenBufferNS[0]+\"_\");\n\t\t\ttokenize $tokenBufferNS[1] \"_\" $tokenBuffer2;\n\t\t\t$subName = $tokenBuffer2[size($tokenBuffer2)-2];\n\t}\n\t\n\ttokenize $bgColor \":\" $bgColorBuffer;\n\tfloat $bgr = $bgColorBuffer[0];\n\tfloat $bgg = $bgColorBuffer[1];\n\tfloat $bgb = $bgColorBuffer[2];\n\tif (!`tabLayout -q -ex ($charName+\"PkrLyt\")`){\n\t\ttabLayout -parent abxPickerCharTabs ($charName+\"PkrLyt\");\n\t}\n\tif ($charName != \"\"){\n\t\tif (size($tokenBufferNS) < 2)\n\t\t\tformLayout -parent ($charName+\"PkrLyt\") -dtg ($charName2+\"|\"+$subName+\"|\"+$bgColor) -bgc $bgr $bgg $bgb -dpc \"abxPickerCtrlDrop\" ($charName2+$subName+\"PkrLyt\");\n\t\telse\n\t\t\tformLayout -parent ($charName+\"PkrLyt\") -dtg ($charName+\":|\"+$subName+\"|\"+$bgColor) -bgc $bgr $bgg $bgb -dpc \"abxPickerCtrlDrop\" ($charName2+$subName+\"PkrLyt\");\n\t}\n\telse{\n\t\tformLayout -parent ($charName+\"PkrLyt\") -dtg (\" |\"+$subName+\"|\"+$bgColor) -bgc $bgr $bgg $bgb -dpc \"abxPickerCtrlDrop\" ($charName2+$subName+\"PkrLyt\");\n\t}\n\tif (`filetest -f $bgImage`)\n\t\t$bgPic = `symbolButton -enable false -image $bgImage -bgc $bgr $bgg $bgb`;\n\telse\n\t\t$bgPic = `symbolButton -visible false -bgc $bgr $bgg $bgb`;\n\ttabLayout -e -tabLabel ($charName2+$subName+\"PkrLyt\") $subName ($charName+\"PkrLyt\");\n\t\n\tformLayout -e \n\t\t-af $bgPic \"top\" -2 \n\t\t-af $bgPic \"left\" -2 \n\t\t-an $bgPic \"right\"  \n\t\t-an $bgPic \"bottom\" \n\t\t($charName2+$subName+\"PkrLyt\");\n\t\n\t// if namespaces are used prefix with colon else use underscore\n\tif (size($tokenBufferNS)>1)\n\t\t$pickrPrefix = ($charName+\":\");\n\telse\n\t\t$pickrPrefix = $charName2;\n\t\t\n\tfor ($i=0;$i<$count;$i++){\n\t\ttokenize $data[$i] \":\" $tokenBuffer;\n\t\tint $xPos = $tokenBuffer[0];\n\t\tint $yPos = $tokenBuffer[1];\n\t\tfloat $bgr = $tokenBuffer[2];\n\t\tfloat $bgg = $tokenBuffer[3];\n\t\tfloat $bgb = $tokenBuffer[4];\n\t\tstring $control;\n\t\t\n\t\t// if prefix flag is true\n\t\tif ($charPrefix == 1){\n\t\t\t// if the data node has a rename prefix\n\t\t\tif ($charName2!=\"\"){\n\t\t\t\t// create the button that sets the pickrPrefix\n\t\t\t\t$control = `abxPickerNewButton $xPos $yPos $width[$i] $height[$i] $bgr $bgg $bgb $image[$i] (\"global string $pickrPrefix=\\\"\"+$pickrPrefix+\"\\\";\"+$command[$i]) $label[$i]`;\n\t\t\t\t}\n\t\t\telse{\n\t\t\t\t$control = `abxPickerNewButton $xPos $yPos $width[$i] $height[$i] $bgr $bgg $bgb $image[$i] (\"global string $pickrPrefix=\\\"\\\";\"+$command[$i]) $label[$i]`;\n\t\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$control = `abxPickerNewButton $xPos $yPos $width[$i] $height[$i] $bgr $bgg $bgb $image[$i] (\"global string $pickrPrefix=\\\"\\\";\"+$command[$i]) $label[$i]`;\n\t\t}\n\t\tabxPickerSetPos ($charName2+$subName+\"PkrLyt\") $control $xPos $yPos $width[$i] $height[$i];\n\t}\n\ttextField -e -text $charName abxPickerCharText;\n\t// formLayout -e -visible true ($charName2+$subName+\"PkrLyt\");\n}\n\n//------------------------------------------------------------------\n// writes the picker data to a transform node\n\nglobal proc abxPickerWriteNode (string $picker) {\n\t\n\tint $buttonCount = `layout -q -nch $picker`;\n\tstring $uiName[] = `layout -q -ca $picker`;\n\tstring $bgImage = `symbolButton -q -image $uiName[0]`;\n\tstring $pickerData = `layout -q -dtg $picker`;\n\t\n\tstring $data[];\n\tint $width[];\n\tint $height[];\n\tstring $overlay[];\n\tstring $image[];\n\tstring $command[];\n\tstring $label[];\n\tstring $nodeName = \"\";\n\n\tfor ($i=1;$i<$buttonCount;$i++){\n\t\t$data[$i-1] = `iconTextButton -q -dtg $uiName[$i]`;\n\t\t$width[$i-1] = `control -q -width $uiName[$i]`;\n\t\t$height[$i-1] = `control -q -height $uiName[$i]`;\n\t\t$overlay[$i-1] = `iconTextButton -q -imageOverlayLabel $uiName[$i]`;\n\t\t$image[$i-1] = `iconTextButton -q -image1 $uiName[$i]`;\n\t\t$command[$i-1] = `iconTextButton -q -command $uiName[$i]`;\n\t\t$label[$i-1] = `iconTextButton -q -label $uiName[$i]`;\n\t}\n\tstring $pickerDataBuffer[];\n\ttokenize $pickerData \"|\" $pickerDataBuffer;\n\tif ($pickerDataBuffer[0] == \" \")\n\t\t$nodeName = ($pickerDataBuffer[1]+\"_PIKR\");\n\telse \n\t\t$nodeName = ($pickerDataBuffer[0]+$pickerDataBuffer[1]+\"_PIKR\");\n\tif (!objExists($nodeName))\n\t\tabxPickerNewNode ($nodeName) \"\" \"\" 0;\t\n\n\tprint (\"Saving \"+$nodeName+\"\\n\");\n\n\tsetAttr ($nodeName+\".bgImage\") -type \"string\" $bgImage;\n\tsetAttr ($nodeName+\".bgColor\") -type \"string\" ($pickerDataBuffer[2]+\":\"+$pickerDataBuffer[3]+\":\"+$pickerDataBuffer[4]);\n\tsetAttr ($nodeName+\".count\") ($buttonCount-1);\n\t\n\tint $charPrefix = `getAttr ($nodeName+\".charPrefix\")`;\n\t\n\t// build setAttr\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".data -type stringArray \"+($buttonCount-1));\n\tfor ($each in $data)\n\t\t$setAttrCmd = ($setAttrCmd + \" \\\"\" + $each + \"\\\"\");\n\teval ($setAttrCmd);\n\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".overlay -type stringArray \"+($buttonCount-1));\n\tfor ($each in $overlay)\n\t\t$setAttrCmd = ($setAttrCmd + \" \\\"\" + $each + \"\\\"\");\n\teval ($setAttrCmd);\n\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".image -type stringArray \"+($buttonCount-1));\n\tfor ($each in $image)\n\t\t$setAttrCmd = ($setAttrCmd + \" \\\"\" + $each + \"\\\"\");\n\teval ($setAttrCmd);\n\n\t// writes the command data, removes prefix code\n\t\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".command -type stringArray \"+($buttonCount-1));\n\tfor ($each in $command) {\n\t\t//if ($charPrefix == 1){\n\t\t\tstring $tokenBuffer[];\n\t\t\ttokenize $each \";\" $tokenBuffer;\n\t\t\tstring $newCommand = \"\";\n\t\t\t$newCommand = $tokenBuffer[1];\n\t\t\tfor ($i=2;$i<size($tokenBuffer);$i++){\n\t\t\t\t$newCommand = ($newCommand + \";\" + $tokenBuffer[$i]);\n\t\t\t}\t\n\t\t\t$setAttrCmd = ($setAttrCmd + \" \\\"\" + encodeString($newCommand) + \"\\\"\");\n\t\t//}\n\t\t//else {\n\t\t//\t$setAttrCmd = ($setAttrCmd + \" \\\"\" + encodeString($each) + \"\\\"\");\n\t\t//}\n\t}\n\teval ($setAttrCmd);\n\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".width -type Int32Array \"+($buttonCount-1));\n\tfor ($each in $width)\n\t\t$setAttrCmd = ($setAttrCmd + \" \" + $each);\n\teval ($setAttrCmd);\n\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".height -type Int32Array \"+($buttonCount-1));\n\tfor ($each in $height)\n\t\t$setAttrCmd = ($setAttrCmd + \" \" + $each);\t \n\teval ($setAttrCmd);\n\t\n\tif (!attributeExists(\"label\",$nodeName))\n\t\taddAttr -longName \"label\" -dt \"stringArray\" nodeName;\n\tstring $setAttrCmd = (\"setAttr \"+$nodeName+\".label -type stringArray \"+($buttonCount-1));\n\tfor ($each in $label)\n\t\t$setAttrCmd = ($setAttrCmd + \" \\\"\" + encodeString($each) + \"\\\"\");\n\teval ($setAttrCmd);\n\t\n}\n\n//------------------------------------------------------------------------\n// called when clicking the buttons, allows for additive/toggle selection\nglobal proc abxPickerSelect (string $selList){\n\tstring $selListBuffer[];\n\tglobal string $pickrPrefix;\n\ttokenize $selList \" \" $selListBuffer;\n\tif ($pickrPrefix != \"\"){\n\t\tfor ($i=0;$i<size($selListBuffer);$i++){\n\t\t\t$selListBuffer[$i] = ($pickrPrefix+$selListBuffer[$i]);\n\t\t}\n\t}\n\t\t\n\tint $mods = `getModifiers`;\n\t// shift\n\tif (($mods / 1) %2) {\n\t\tselect -add $selListBuffer;\n\t}\n\t// ctrl\n\telse if (($mods / 4) %2) {\n\t\tselect -toggle $selListBuffer;\n\t}\n\t// nothing\n\telse{\n\t\t//print $selListBuffer;\n\t\tselect $selListBuffer;\n\t\t\n\t}\n}\n\n//------------------------------------------------------------------------\n// called when toggling boolean values such as visibility\nglobal proc abxPickerToggle (string $selList, string $attrList){\n\tglobal string $pickrPrefix;\n\tstring $tokenBufferNodes[];\n\tstring $tokenBufferAttrs[];\n\t\n\ttokenize $selList \" \" $tokenBufferNodes;\n\ttokenize $attrList \" \" $tokenBufferAttrs;\n\t\n\tfor ($each in $tokenBufferNodes){\n\t\tfor ($every in $tokenBufferAttrs){\n\t\t\tif ($pickrPrefix != \"\"){\n\t\t\t\t$oldVal = `getAttr ($pickrPrefix+$each+\".\"+$every)`;\n\t\t\t\tif ($oldVal == 1)\n\t\t\t\t\tsetAttr ($pickrPrefix+$each+\".\"+$every) 0;\n\t\t\t\telse if ($oldVal == 0)\n\t\t\t\t\tsetAttr ($pickrPrefix+$each+\".\"+$every) 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t$oldVal = `getAttr ($each+\".\"+$every)`;\n\t\t\t\tif ($oldVal == 1)\n\t\t\t\t\tsetAttr ($each+\".\"+$every) 0;\n\t\t\t\telse if ($oldVal == 0)\n\t\t\t\t\tsetAttr ($each+\".\"+$every) 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//------------------------------------------------------------------------\n// called when clicking the buttons, allows for additive/toggle selection\nglobal proc abxPickerKey (string $selList){\n\tstring $selListBuffer[];\n\tglobal string $pickrPrefix;\n\ttokenize $selList \" \" $selListBuffer;\n\tif ($pickrPrefix != \"\"){\n\t\tfor ($i=0;$i<size($selListBuffer);$i++){\n\t\t\t$selListBuffer[$i] = ($pickrPrefix+$selListBuffer[$i]);\n\t\t}\n\t}\n\tsetKeyframe $selListBuffer;\n}\n\n//-------------------------------------------------------------------------\n// creates the control preset window\n\nglobal proc abxPickerBuildToolbox() {\n\tif (`window -ex abxPickerToolWindow` != true) {\n\t\twindow -w 156 -h 311 -t \"Buttons\" -tlb true abxPickerToolWindow;\n\t\ttabLayout abxPickerToolTabs;\n\t\tcolumnLayout -rs 4 abxPickerToolColor ;\n\t\trowLayout -nc 6 -cw6 18 18 18 18 18 18 ;\n\t\t\tcolumnLayout -rs 2 ;\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:0:0\" -w 16 -h 16 -bgc .5 0 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:.25:0\" -w 16 -h 16 -bgc .5 .25 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:.5:0\" -w 16 -h 16 -bgc .5 .5 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.25:.5:0\" -w 16 -h 16 -bgc .25 .5 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.5:0\" -w 16 -h 16 -bgc 0 .5 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.5:.25\" -w 16 -h 16 -bgc 0 .5 .25 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.5:.5\" -w 16 -h 16 -bgc 0 .5 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.25:.5\" -w 16 -h 16 -bgc 0 .25 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:0:.5\" -w 16 -h 16 -bgc 0 0 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.25:0:.5\" -w 16 -h 16 -bgc .25 0 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:0:.5\" -w 16 -h 16 -bgc .5 0 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:0:.25\" -w 16 -h 16 -bgc .5 0 .25 -dgc \"abxPickerCtrlColor\";\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 2 ;\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.75:0:0\" -w 16 -h 16 -bgc .75 0 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.38:.5:0\" -w 16 -h 16 -bgc .75 .38 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.75:.75:0\" -w 16 -h 16 -bgc .75 .75 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.38:.75:0\" -w 16 -h 16 -bgc .38 .75 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.75:0\" -w 16 -h 16 -bgc 0 .75 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.75:.38\" -w 16 -h 16 -bgc 0 .75 .38 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.75:.75\" -w 16 -h 16 -bgc 0 .75 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:..38:.75\" -w 16 -h 16 -bgc 0 .38 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:0:.75\" -w 16 -h 16 -bgc 0 0 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.38:0:.75\" -w 16 -h 16 -bgc .38 0 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.75:0:.75\" -w 16 -h 16 -bgc .75 0 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.75:0:..38\" -w 16 -h 16 -bgc .75 0 .38 -dgc \"abxPickerCtrlColor\";\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 2 ;\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:0:0\" -w 16 -h 16 -bgc 1 0 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:.5:0\" -w 16 -h 16 -bgc 1 .5 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:1:0\" -w 16 -h 16 -bgc 1 1 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:1:0\" -w 16 -h 16 -bgc .5 1 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:1:0\" -w 16 -h 16 -bgc 0 1 0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:1:.5\" -w 16 -h 16 -bgc 0 1 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:1:1\" -w 16 -h 16 -bgc 0 1 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:.5:1\" -w 16 -h 16 -bgc 0 .5 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:0:0:1\" -w 16 -h 16 -bgc 0 0 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:0:1\" -w 16 -h 16 -bgc .5 0 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:0:1\" -w 16 -h 16 -bgc 1 0 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:0:.5\" -w 16 -h 16 -bgc 1 0 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 2 ;\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:.5:.5\" -w 16 -h 16 -bgc 1 .5 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:.75:.5\" -w 16 -h 16 -bgc 1 .75 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:1:.5\" -w 16 -h 16 -bgc 1 1 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.75:1:.5\" -w 16 -h 16 -bgc .75 1 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:1:.5\" -w 16 -h 16 -bgc .5 1 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:1:.75\" -w 16 -h 16 -bgc .5 1 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:1:1\" -w 16 -h 16 -bgc .5 1 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:.75:1\" -w 16 -h 16 -bgc .5 .75 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:.5:1\" -w 16 -h 16 -bgc .5 .5 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.75:.5:1\" -w 16 -h 16 -bgc .75 .5 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:.5:1\" -w 16 -h 16 -bgc 1 .5 1 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:.5:.75\" -w 16 -h 16 -bgc 1 .5 .75 -dgc \"abxPickerCtrlColor\";\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 2 ;\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.7:.4:.4\" -w 16 -h 16 -bgc .7 .4 .4 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.7:.5:.4\" -w 16 -h 16 -bgc .7 .5 .4 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.7:.7:.4\" -w 16 -h 16 -bgc .7 .7 .4 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:.7:.4\" -w 16 -h 16 -bgc .5 .7 .4 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.4:.7:.4\" -w 16 -h 16 -bgc .4 .7 .4 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.4:.7:.5\" -w 16 -h 16 -bgc .4 .7 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.4:.7:.7\" -w 16 -h 16 -bgc .4 .7 .7 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.4:.5:.7\" -w 16 -h 16 -bgc .4 .5 .7 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.4:.4:.7\" -w 16 -h 16 -bgc .4 .4 .7 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.5:.4:.7\" -w 16 -h 16 -bgc .5 .4 .7 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.7:.4:.7\" -w 16 -h 16 -bgc .7 .4 .7 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.7:.4:.5\" -w 16 -h 16 -bgc .7 .4 .5 -dgc \"abxPickerCtrlColor\";\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 2 ;\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.0:.0:.0\" -w 16 -h 16 -bgc .0 .0 .0 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.2:.2:.2\" -w 16 -h 16 -bgc .2 .2 .2 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.4:.4:.4\" -w 16 -h 16 -bgc .4 .4 .4 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.6:.6:.6\" -w 16 -h 16 -bgc .6 .6 .6 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:.8:.8:.8\" -w 16 -h 16 -bgc .8 .8 .8 -dgc \"abxPickerCtrlColor\";\n\t\t\ticonTextButton -style \"iconOnly\" -dtg \"0:0:1:1:1\" -w 16 -h 16 -bgc 1 1 1 -dgc \"abxPickerCtrlColor\";\n\t\t\tsetParent..;setParent..;\n\t\tsetParent..;\n\t\t//columnLayout -rs 4 abxPickerToolImages;\n\t\t//\trowLayout -nc 2 -co2 6 6 -cw2 36 36;\n\t\t//\ticonTextButton -style \"iconOnly\" -l \"0:0:.9:.9:.9\" -bgc .9 .9 .9 -image \"\" -w 32 -h 32 -dgc \"abxPickerCtrlImage\";\n\t\t\t//textField -w 120 abxPickerCustomImageField;\n\t\t//\tsymbolButton -image \"fileOpen.xpm\";\n\t\t//\tsetParent..;\n\t\t\t\n\t\tsetParent..;\n\t\tcolumnLayout abxPickerToolcmd;\n\t\trowLayout -nc 2 -co2 3 3 -cw2 60 60;\n\t\t\tcolumnLayout -rs 4;\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Select and Use Move Tool\" -bgc .95 .95 .95 -label \"Move\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*selectT*/\";\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Select and Use Rotate Tool\" -bgc .95 .95 .95 -label \"Rotate\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*selectR*/\";\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Select and Use Scale Tool\" -bgc .95 .95 .95 -label \"Scale\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*selectS*/\";\t\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Select and Show Manip\" -bgc .95 .95 .95 -label \"Manip\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*selectM*/\";\t\t\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 4;\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Select Object\" -bgc .95 .95 .95 -label \"Select\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*select*/\";\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Key Selected Object\" -bgc .95 .95 .95 -label \"Key\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*key*/\";\n\t\t\ticonTextButton -style \"textOnly\" -ann \"Toggle Selected Attr On|Off (select attr in channelbox)\" -bgc .95 .95 .95 -label \"Toggle\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" -c \"/*toggle*/\";\n\t\t\tsetParent..;setParent..;\n\t\trowLayout -nc 2 -co2 3 3 -cw2 60 60;\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"Custom\" -w 56 -h 30 -dgc \"abxPickerCtrlCommand\" abxPickerCmdCustom;\t\t\t\n\t\t\ttextField -text \"Custom\" -cc \"iconTextButton -e -c `textField -q -text abxPickerCmdTxt` abxPickerCmdCustom\" abxPickerCmdTxt;\n\t\t\tsetParent..;\n\t\t\tsetParent..;\n\t\tcolumnLayout abxPickerToolLabel;\n\t\trowLayout -nc 2 -co2 3 3 -cw2 60 60;\n\t\t\tcolumnLayout -rs 4;\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"God\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"Mvr\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"Dir\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\t\t\t\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"IK\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\n\t\t\tsetParent..;\n\t\t\tcolumnLayout -rs 4;\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"Key\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"KeyAll\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"SelAll\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\t\t\t\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\";\n\t\t\tsetParent..;\n\t\t\tsetParent..;\n\t\trowLayout -nc 2 -co2 3 3 -cw2 60 60;\n\t\t\ticonTextButton -style \"textOnly\" -bgc .95 .95 .95 -label \"Custom\" -w 56 -h 30 -dgc \"abxPickerCtrlLabel\" abxPickerLblCustom;\n\t\t\ttextField -text \"Custom\" -cc \"iconTextButton -e -label `textField -q -text abxPickerLblTxt` abxPickerLblCustom\" abxPickerLblTxt;\n\t\t\t\n\t\ttabLayout -e -tabLabel \"abxPickerToolColor\" \"Color\" abxPickerToolTabs;\n\t\t//tabLayout -e -tabLabel \"abxPickerToolImages\" \"Image\" abxPickerToolTabs;\n\t\ttabLayout -e -tabLabel \"abxPickerToolcmd\" \"Command\" abxPickerToolTabs;\n\t\ttabLayout -e -tabLabel \"abxPickerToolLabel\" \"Label\" abxPickerToolTabs;\n\n\n\t\tshowWindow abxPickerToolWindow;\n\t}\n\telse {\n\t\tshowWindow abxPickerToolWindow;\n\t}\n}\n\nglobal proc abxPickerMenuCmd (string $character){\n\n\tstring $pickerNodes[];\n\tstring $pickerNodesAlt[];\n\tif ($character != \"\"){\n\t\t$pickerNodes = `ls ($character+\"_*_PIKR\")`;\n\t\t$pickerNodes = stringArrayCatenate($pickerNodes,`ls ($character+\":*_PIKR\")`);\n\t}\n\telse{ \n\t\t// if a charname prefix is used, find only nameless nodes\n\t\t$pickerNodesAlt = `ls \"*_PIKR\"`;\n\t\tint $i = 0;\n\t\tstring $tokenBuffer[];\n\t\tfor ($each in $pickerNodesAlt){\n\t\t\ttokenize $each \"_\" $tokenBuffer;\n\t\t\tif (size($tokenBuffer)<3){\n\t\t\t\t$pickerNodes[$i] = $each;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor ($node in $pickerNodes){\n\t\tstring $charName = \"\";\n\t\tstring $charName2 = \"\";\n\t\tstring $tokenBuffer[];\n\t\tstring $tokenBuffer2[];\n\t\tstring $subName=\"\";\n\t\ttokenize $node \":\" $tokenBuffer;\n\t\t\n\t\t// if there is no namespaces in use\n\t\tif (size($tokenBuffer) < 2){\n\t\t\t// break apart underscores\n\t\t\ttokenize $node \"_\" $tokenBuffer;\n\t\t\t// if it has a character name\n\t\t\tif (size($tokenBuffer) >= 3){\n\t\t\t\t$charName = ($tokenBuffer[0]);\n\t\t\t\t$charName2 = ($tokenBuffer[0]+\"_\");\n\t\t\t\tfor ($i=1;$i<size($tokenBuffer)-2;$i++){\n\t\t\t\t\t$charName = ($charName + $tokenBuffer[$i]);\n\t\t\t\t}\t\t\n\t\t\t}\n\t\t\t$subName = $tokenBuffer[size($tokenBuffer)-2];\n\t\t}\n\t\t// if there is a namespace\n\t\telse{\n\t\t\t$charName = $tokenBuffer[0];\n\t\t\t$charName2 = ($tokenBuffer[0]+\"_\");\n\t\t\ttokenize $tokenBuffer[1] \"_\" $tokenBuffer2;\n\t\t\t$subName = $tokenBuffer2[size($tokenBuffer2)-2];\n\t\t}\n\t\t\n\t\t// if the Character tab and subchar tab doesn't exist load the node\n\t\tif (!`tabLayout -q -ex ($charName+\"PkrLyt\")`){\n\t\t\tif (!`formLayout -q -ex ($charName2+$subName+\"PkrLyt\")`)\n\t\t\t\tabxPickerReadNode $node;\n\t\t}\n\t\t// if the character tab exists but the subchar tab doesn't load the node\n\t\telse{\n\t\t\tif (!`formLayout -q -ex ($charName2+$subName+\"PkrLyt\")`)\n\t\t\t\tabxPickerReadNode $node;\n\t\t}\n\t\ttabLayout -e -st ($charName+\"PkrLyt\") abxPickerCharTabs; \n\t\tif ($charName != \"\")\t\n\t\t\ttextField -e -text $charName abxPickerCharText;\n\t\telse\n\t\t\ttextField -e -text \"*Prefix*\" abxPickerCharText;\n\t}\n}\n\nglobal proc abxPickerBrowsePath (string $sampleImageName, string $fileType) {\n\ttextFieldButtonGrp -e -text $sampleImageName abxPickerImagePath;\n\n}\n\nglobal proc abxPickerScriptJob () {\n\tif (`window -q -ex abxPickerWindow`)\n\tabxPickerRefresh;\n}\nglobal proc abxPickerHelp() {\n\t\tif (!`window -q -ex abxPickerHelpWin`){\n\t\t//windowPref -r abxPickerHelpWin;\n\t\twindow -s false -tlb true -t \"abxPicker Help\" -h 400 -w 400 abxPickerHelpWin;\n\t\t\n\t\t\tcolumnLayout -rs 1 -adj 1 -w 400 -cat \"both\" 0;\n\t\t\ttext -al \"left\" -label (\n\t\t\t\" abxPicker is a Character Control Interface that allows you to\\n\"\n\t\t\t+\" create a schematic layout of your character's animation controls\\n\"\n\t\t\t+\" for simplified selection and animation.\\n\");\n\t\t\tscrollLayout -cr true -w 400 -h 270 abxPickerHelpScrl;\n\t\t\tcolumnLayout -rs 1 -adj 1 -w 400 -cat \"both\" 0;\n\t\t\ttext -al \"left\" -font \"boldLabelFont\" -label \"\\n Making a New Interface a.k.a. \\\"Sheet\\\"\\n\";\n\t\t\ttext -al \"left\" -label (\n\t\t\t\t \"    1. Press the \\\"New Picker Sheet\\\" button in the upper left corner.\\n\"\n\t\t\t\t+\"    2. Enter a Name for your character\\n\"\n\t\t\t\t+\"    3. Enter a SubSet Name such as \\\"Body\\\" or \\\"Hands\\\" or \\\"Face\\\"\\n\"\n\t\t\t\t+\"    4. Browse for a background image or leave blank and choose a color\\n\"\n\t\t\t\t+\"    5. Press \\\"OK\\\" and your new picker sheet is shown. Also notice a \\n\"\n\t\t\t\t+\"       PIKR node is now visible in your outliner. This node stores the \\n\"\n\t\t\t\t+\"       data for your interface and can be exported/imported to other scenes \\n\\n\");\n\t\t\ttext -al \"left\" -font \"boldLabelFont\" -label \" Create and Layout Buttons\\n\";\n\t\t\ttext -al \"left\" -label (\n\t\t\t\t \"    1. Select a control or object in maya's viewport that you want to \\n\"\n\t\t\t\t+\"       create a button for \\n\"\n\t\t\t\t+\"    2. Middle-Mouse-Button drag and drop one of the colored buttons in the  \\n\"\n\t\t\t\t+\"       lower left corner onto the picker sheet. This creates a new button that \\n\"\n\t\t\t\t+\"       will select the current object \\n\"\n\t\t\t\t+\"    3. Reposition the button by MMB draging it to a new position \\n\"\n\t\t\t\t+\"    4. Resize button by Ctrl+MMB draging. Where you release will define \\n\"\n\t\t\t\t+\"       the lower right corner of the button \\n\"\n\t\t\t\t+\"    5. Duplicate buttons by Shift+MMB draging an existing button\\n\"\n\t\t\t\t+\"    6. Continue to create and layout buttons for your character \\n\"\n\t\t\t\t+\"    7. Remove buttons by MMB drag and drop to the trash can \\n\"\n\t\t\t\t+\"    8. Be sure to save your changes by clicking the \\\"Save Picker Sheet\\\"\\n\"\n\t\t\t\t+\"       Button in the upper left corner \\n\\n\");\n\t\t\ttext -al \"left\" -font \"boldLabelFont\" -label \" Edit Button Color, Commands, add Labels \\n\";\n\t\t\ttext -al \"left\" -label (\n\t\t\t\t \"    1. Press \\\"More...\\\" to show the button pallete \\n\"\n\t\t\t\t+\"    2. Change colors by MMB draging and droping over existing buttons \\n\"\n\t\t\t\t+\"    3. Change the command by selecting a new object in the viewport and \\n\"\n\t\t\t\t+\"       then MMB drag and drop over existing buttons. Move, Rotate, Scale, \\n\"\n\t\t\t\t+\"       and Manip will select the object and automatically switch tools.\\n\"\n\t\t\t\t+\"       Key command will key all keyable attributes on selected objects.\\n\"\n\t\t\t\t+\"       Toggle will toggle selected channels in channel editor between \\n\"\n\t\t\t\t+\"       values of 0 and 1 (useful for visibility buttons or other)\\n\" \n\t\t\t\t+\"    4. Change Labels by MMB drag and drop over existing buttons. Create \\n\"\n\t\t\t\t+\"       your own labelsby entering text into the \\\"custom\\\" field, press enter,\\n\"\n\t\t\t\t+\"       and then MMB drag the button \\n\\n\");\n\t\t\ttext -al \"left\" -font \"boldLabelFont\" -label \" Using the Picker to Pick Things\\n\";\n\t\t\ttext -al \"left\" -label (\n\t\t\t\t \"    1. Left Click the Character Menu located in the top middle of the Picker\\n\"\n\t\t\t\t+\"       window to choose the character you wish to work with\\n\"\n\t\t\t\t+\"    2. Left click buttons to select the corresponding object/control\\n\"\n\t\t\t\t+\"    3. Shift + Left click to add objects to the selection list \\n\"\n\t\t\t\t+\"    4. Ctrl + Left click to remove objects from the selection list\\n\\n\");\n\t\t\ttext -al \"left\" -font \"boldLabelFont\" -label \" Working with Referencing/Pipeline \\n\";\n\t\t\ttext -al \"left\" -label (\n\t\t\t\t \"    If your developing character's in a pipeline using referencing you'll  \\n\"\n\t\t\t\t+\"    probably want the character's name to be unspecified until that scene is \\n\"\n\t\t\t\t+\"    referenced. abxPicker supports rename prefixes or namespaces that specify \\n\"\n\t\t\t\t+\"    the character's name. To set this up do the following\\n\"\n\t\t\t\t+\"    1. In your character scene file, create a new picker sheet but leave.\\n\"\n\t\t\t\t+\"       the \\\"Name\\\" field blank. This will specify that you will prefix the \\n\"\n\t\t\t\t+\"       character name later when referencing.\\n\" \n\t\t\t\t+\"    2. You'll notice that the character name is listed in the character menu as \\n\"\n\t\t\t\t+\"       *prefix* Go about making the rest of your character picker normally.\\n\"\n\t\t\t\t+\"       and thats it. When you reference the scene the prefix will be the name.\\n\\n\");\n\n\t\t\tsetParent..;\n\t\t\tsetParent..;\n\t\t\trowLayout -nc 2 -cw2 300 200;\n\t\t\t\ttext -label \"       abxPicker.mel �2006 J. Adam Burke\\n       http://www.adamburke.net\\n       Version 1.0\";\n\t\t\t\tbutton -w 60 -label \"OK\" -c \"deleteUI -window abxPickerHelpWin\";\n\t\t\tscrollLayout -e -h 270 abxPickerHelpScrl;\n\t\t\tshowWindow abxPickerHelpWin;\n\t\t\t}\n\t\t\telse{showWindow abxPickerHelpWin;}\n}\n\nabxPicker()" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def LOCK_BUFFER_SRT(self):\n\tcmds.select(\"lockCtrlBuffers\")\n\tlistBuffers = cmds.ls(sl=True, fl=True)\n\taxisS = (\"x\",\"y\",\"z\")\n\n\tfor item in listBuffers:\n\t\tfor i in range(3):\n\t\t\tcmds.setAttr(\"{}.t{}\".format(item, axisS[i]),lock=True)\n\t\t\tcmds.setAttr(\"{}.r{}\".format(item, axisS[i]),lock=True)\n\t\t\tcmds.setAttr(\"{}.s{}\".format(item, axisS[i]),lock=True)\n\t\tcmds.setAttr(\"{}.v\".format(item),lock=True)\n\n\tcmds.delete(\"lockCtrlBuffers\")\n\ndef HIDE_IN_OUTLINE(self):\n\tcmds.select(\"hideInOutliner\")\n\tlistHideOutline = cmds.ls(sl=True, fl=True)\n\n\tfor item in listHideOutline:\n\t\tcmds.setAttr(\"{}.hiddenInOutliner\".format(item),1)\n\n\tcmds.delete(\"hideInOutliner\")" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "def LOCK_BUFFER_SRT(self):\n\tcmds.select(\"lockCtrlBuffers\")\n\tlist..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "checkSet" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "cmds.select(\"lockCtrlBuffers\")\nlistBuffers = cmds.ls(sl=True, fl=True)\naxisS = (\"x\",\"y\",\"z\")\n\n\nfor item in listBuffers:\n    for i in range(3):\n        cmds.setAttr(\"{}.t{}\".format(item, axisS[i]),lock=True)\n        cmds.setAttr(\"{}.r{}\".format(item, axisS[i]),lock=True)\n        cmds.setAttr(\"{}.s{}\".format(item, axisS[i]),lock=True)\n    cmds.setAttr(\"{}.v\".format(item),lock=True)\n\n\n\ncmds.select(\"hideInOutliner\")\nlistHideOutline = cmds.ls(sl=True, fl=True)\n\n\nfor item in listHideOutline:\n    cmds.setAttr(\"{}.hiddenInOutliner\".format(item),1)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "evaluationManager -mode \"off\";" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "evaluationManager -mode \"off\";" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DG_mode" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "evaluationManager -mode \"off\";" 
        -sourceType "mel" 
        -doubleClickCommand "evaluationManager -mode parallel;" 
        -commandRepeatable 1
        -flat 1
    ;

} 
